<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>English-04</title>
    <link href="/2022/10/31/English-04/"/>
    <url>/2022/10/31/English-04/</url>
    
    <content type="html"><![CDATA[<h4 id="Order-food-delivery"><a href="#Order-food-delivery" class="headerlink" title="Order food delivery"></a>Order food delivery</h4><p>Hi, honey. What do you have in mind for dinner?</p><p> I am too tired to cook. Let’s oder a pizza.</p><p>Sounds good. I will place the oder on Uber eats.</p><p>That’s weird. Our food should be here now. I will call customer service. </p><p>Hi, I order the delivery about 40 minutes ago. and I still didn’t get it. Could you check it for me please? The order id is 123456.</p><p>Sorry for the inconvenience. According to the delivery guy’s status, he picked up your order twenty minutes ago. And the estimated time  of arrival is five minutes.</p><p>You can also check the real-time position of your delivery on our App.</p><p>Thanks so much for your help. Oh, he is here.</p><h4 id="Charge-my-phone"><a href="#Charge-my-phone" class="headerlink" title="Charge my phone"></a>Charge my phone</h4><p>Hey, Tracy. Can i use your charger, please? </p><p>My phone is running out of battery.</p><p>Sorry, Alice. I just lend it to Mark. His phone was also out of power.</p><p>I have a charging cable. You can plug in your laptop and charge your phone.</p><p>Genius. Oh, it does not fit. My phone has a type-C port instead of the Lightning port.</p><p>oh, That’s too bad. Maybe you can login in wechat on your laptop and turn off your phone for a while to save some battery.</p><p>Well, I can’ t. I am waiting for an extremely important call from a customer.</p><p>Hey, is there a shared power station in the cafeteria downstairs?</p><p>Right, there are like twenty shared power banks.</p><p>That station is a life-saver.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>prototype</title>
    <link href="/2022/10/30/prototype/"/>
    <url>/2022/10/30/prototype/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><br><span class="hljs-title class_">Array</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-title class_">String</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-title class_">Boolean</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-title class_">Funtion</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h4 id="Object"><a href="#Object" class="headerlink" title="Object()"></a>Object()</h4><p>Object本身是一个函数，可以当作工具方法使用，将任意值转为对象。这个方法常用于保证某个值一定是对象。</p><p>如果参数为空(或者为undefined和null)，Object()返回一个空对象。</p><p>如果参数是原始类型的值，Object方法将其转为对应的包装对象。</p><p>如果参数是一个对象，它总是返回该对象，即不用转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isObject</span>(<span class="hljs-params">value</span>) &#123;    <br>    <span class="hljs-keyword">return</span> value === <span class="hljs-title class_">Object</span>(value); <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>prototype</category>
      
    </categories>
    
    
    <tags>
      
      <tag>prototype</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP1.0+HTTP1.1+HTTP2.0+HTTP3.0</title>
    <link href="/2022/10/30/HTTP%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/10/30/HTTP%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>EventEmitter</title>
    <link href="/2022/10/30/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20EventEmitter/"/>
    <url>/2022/10/30/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20EventEmitter/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>curry</title>
    <link href="/2022/10/30/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20curry/"/>
    <url>/2022/10/30/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20curry/</url>
    
    <content type="html"><![CDATA[<h4 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h4><p>currying 是一种函数转化方法，是高阶函数（接收函数作为参数的函数）的一种。它将一个接收多参数的函数转为接收部分参数的函数。柯里化后的函数只传递部分参数来调用，并返回一个新的函数去处理剩余的参数，是逐步传参的过程。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>用数组将参数收集起来，达到原函数形参个数就执行原函数，否则返回一个新函数继续接收新参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b, c</span>)&#123;<br>    <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span>(<span class="hljs-params">fn, ...args</span>) &#123;<br>    <span class="hljs-keyword">const</span> num = fn.<span class="hljs-property">length</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> arr = [].<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-keyword">if</span> (args) &#123;<br>arr.<span class="hljs-title function_">push</span>(...args)<br>&#125;<br>        <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span> &lt; num) &#123;<br>            <span class="hljs-keyword">return</span> curry.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, fn, ...arr);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...arr);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> add_curried = <span class="hljs-title function_">curry</span>(add);<br><span class="hljs-title function_">add_curried</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>); <span class="hljs-comment">// 6</span><br><span class="hljs-title function_">add_curried</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">// 6 </span><br><span class="hljs-title function_">add_curried</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>); <span class="hljs-comment">// 6</span><br><span class="hljs-title function_">add_curried</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">// 6</span><br><br><span class="hljs-keyword">var</span> add2 = <span class="hljs-title function_">curry</span>(add, <span class="hljs-number">1</span>);<br><span class="hljs-title function_">add2</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 6</span><br><span class="hljs-title function_">add2</span>(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>); <span class="hljs-comment">// 6</span><br><br><span class="hljs-keyword">var</span> add3 = <span class="hljs-title function_">curry</span>(add, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-title function_">add3</span>(); <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>curry, 函数柯里化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器系列之-垃圾回收</title>
    <link href="/2022/10/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <url>/2022/10/30/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>promise</title>
    <link href="/2022/10/30/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20promise/"/>
    <url>/2022/10/30/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20promise/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>English-03</title>
    <link href="/2022/10/29/English-03/"/>
    <url>/2022/10/29/English-03/</url>
    
    <content type="html"><![CDATA[<h4 id="Poor-connection"><a href="#Poor-connection" class="headerlink" title="Poor connection"></a>Poor connection</h4><p>Hi, everyone. Let’s give some warm greetings to our new member, Alice.</p><p>Hi, everyone. I am Alice. I am looking forward to working with you guys.</p><p>Hi, Alice. Welcome on board.</p><p>Terrific. Alice, Julia will help you set up on our online system and your company email account.</p><p>I am sorry, I got cut off just now. What else do I  need to help Alice with beside the on-line system?</p><p>Our company email account.</p><p>Sure, will do.</p><p>Perfect. Let’s wrap up this meeting and get back to work.</p><hr><h4 id="See-a-doctor"><a href="#See-a-doctor" class="headerlink" title="See a doctor"></a>See a doctor</h4><p>Hi, do you have an appointment?</p><p>Yes, at 10 am. My last name is Smith.</p><p>Let me check. Well, Ms smith, please come with me. I am gonna take your vitals.</p><p>Good, everything look fine. Doctor Miller is waiting for you in room three.</p><p>Hi, Ms Smith. Could you explain your symptoms?</p><p>I had a sharp pain in my stomach yesterday. I took some pain killers, but I have no appetite.</p><p>And I am feeling nauseous.</p><p>What did you have before the pain?</p><p>I have some lobster. But it tasted funny. </p><p>The lobster must gone bad. You are having a stomach flu but not a serious one. So there is no need to get a shot.  I will prescribe some medicine. You can get them in the drug store. Remember to take the pills on time and you will be fine shortly.</p>]]></content>
    
    
    <categories>
      
      <category>English Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>poor connection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP和UDP的区别</title>
    <link href="/2022/10/29/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/10/29/TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>TCP系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UDP, TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP连接之三次握手</title>
    <link href="/2022/10/29/TCP%E8%BF%9E%E6%8E%A5%E4%B9%8B%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    <url>/2022/10/29/TCP%E8%BF%9E%E6%8E%A5%E4%B9%8B%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="TCP报文中比较重要的字段"><a href="#TCP报文中比较重要的字段" class="headerlink" title="TCP报文中比较重要的字段"></a>TCP报文中比较重要的字段</h4><ol><li><p>序列号(sequence number): 解决网络中乱序的问题</p></li><li><p>确认应答号（acknowledgement number): 解决网络中丢包的问题</p></li><li><p>标志位（flags)</p><p>ACK: 确认序号有效</p><p>SYN: 发起一个连接</p><p>FIN: 释放一个连接</p><p>RST: 重置一个连接</p><p>PSH: 接收方应该尽快将这个报文发给应用层</p><p>URG: 紧急指针（urgent pointer)</p><p><img src="D:\学习\Blog\img\TCP头部.png"></p></li></ol><h4 id="三次握手的过程："><a href="#三次握手的过程：" class="headerlink" title="三次握手的过程："></a>三次握手的过程：</h4><p>客户端状态：CLOSED, SYN-SENT, ESTABLISHED</p><p>服务端状态：LISTENING, SYN-SENT, ESTABLISHED</p><p>一开始，双方都处于close状态，先是接收端监听某个端口，进入listen状态</p><p><strong>第一次握手：</strong></p><p>⼀开始，客户端和服务端都处于 CLOSED 状态。</p><p><strong>服务端</strong>：主动监听某个端⼝，处于 LISTEN 状态。<br><strong>客户端</strong>：随机初始化序号（ client_isn ），将此序号置于 TCP ⾸部的「序号」字段中，同时把<br>SYN 标志位置为 1 ，表示 SYN 报⽂。接着把第⼀个 SYN 报⽂发送给服务端，表示向服务端发起连接，该报⽂不包含应⽤层数据，之后客户端处于 SYN-SENT 状态。</p><p><strong>第二次握手：</strong><br><strong>服务端</strong>：在收到客户端的 SYN 报⽂后，服务端也随机初始化⾃⼰的序号（ server_isn ），将此序号填⼊TCP ⾸部的「序号」字段中，其次把 TCP ⾸部的「确认应答号」字段填⼊ client_isn + 1 , 接着把SYN和 ACK 标志位置为 1 。最后把该报⽂发给客户端，该报⽂也不包含应⽤层数据，之后服务端处于SYN-RCVD 状态。</p><p><strong>第三次握手：</strong><br><strong>客户端</strong>：在收到服务端报⽂后，还要向服务端回应最后⼀个应答报⽂，⾸先该应答报⽂ TCP ⾸部 ACK标志位置为 1 ，其次「确认应答号」字段填⼊ server_isn + 1 ，最后把报⽂发送给服务端，这次报⽂可以携带客户到服务器的数据，之后客户端处于 ESTABLISHED 状态。<br><strong>服务端</strong>：收到客户端的应答报⽂后，也进⼊ ESTABLISHED 状态。 </p><blockquote><p>注意：第三次握手时可以携带数据的，因为发送端已经确认了服务端有接收和发送能力，而前两次并没有确认对方的接收能力。</p></blockquote><p><img src="D:\学习\Blog\img\三次握手.png"></p><h4 id="为什么要三次握手："><a href="#为什么要三次握手：" class="headerlink" title="为什么要三次握手："></a>为什么要三次握手：</h4><ol><li>因为有超时重传机制的存在，要防止已失效的连接请求报文段又突然传送到了服务端，造成混乱</li><li>为了防止服务器端开启一些无用的连接增加服务器开销</li><li>为了同步两端的初始化序列号</li></ol><blockquote><p>分两种情况：失效的报文到达的时候，连接还未断开和连接已经断开</p></blockquote><p>假如发送端发送了一个序列号为90的syn报文，此时网络拥塞，发送端可能会连续发送多次请求，有发送了一个序列号为100的syn报文。网络恢复，服务端先收到了序列号为90的syn报文，然后就会给发送端发送ackNumber &#x3D; 90 +1, syn&#x3D;***的报文。发送端接收到后，通过上下文判断，发现自己期望收到的ackNumber应该是100+1，而不是90+1， 就会判断出这是一个历史连接，从而发起RST报文终止连接。</p><p>客户端第一次握手的时候，可能经历网络拥塞，客户端以为这个连接已经丢失，之后重新发送一个请求连接的报文到服务器。当第一个请求在<strong>连接释放后</strong>的某个时间到达服务器，如果是使用二次握手，这时候服务器发送确认数据包给客户端，新的连接就建立了。但是由于客户端这时候没有发送连接请求，所以它不会理睬服务端的确认，也不会跟服务端通信，而这时的服务器会一直等待客户端发送数据，这样服务器就开启了无效连接，浪费了资源。</p><p><img src="D:/学习/Blog/img/三次握手-1.png"></p><p>在三次握手的机制下，<strong>客户端就可以根据确认应答号判断所接受到的ACK+SYN报文是不是历史连接</strong>，并根据是否为历史连接做出不同的应答。</p><p>如果是历史连接，则第三次握⼿发送的报⽂是 RST 报⽂，以此中⽌历史连接；<br>如果不是历史连接，则第三次发送的报⽂是 ACK 报⽂，通信双⽅就会成功建⽴连接；</p><p>还有一个原因，那就是<strong>客户端和服务端要同步双方的初始序列号</strong>。</p><p>所以，两次握手无法防止历史连接的建立，会造成资源浪费，而且不能同步双方的序列号。四次握手只会造成更多的连接延时。</p><h4 id="握手时报文丢失怎么办？"><a href="#握手时报文丢失怎么办？" class="headerlink" title="握手时报文丢失怎么办？"></a>握手时报文丢失怎么办？</h4><p><strong>第一次握手syn丢失</strong>：</p><p>客户端迟迟收不到ack+syn的报文，就会触发超时重传机制。每次超时重传的时间呈指数倍上涨，知道发送5次后，就不会发送syn包了（由tcp_syn_tries参数指定）。</p><p><strong>第二次握手syn+ack丢失：</strong></p><p>客户端无法收到syn+ack报文，就会以为自己没有发送出去，也就相当于第一次握手时的重传一样。</p><p>服务端无法收到ack应答报文，也一样会重发syn+ack报文，如果下一次客户端重发的syn报文到了，服务端会再次发送ack+syn报文，但计时器不会重置，还在继续重传。因为服务端在没有收到第三次握手时，会持续重传到最大次数，默认为5次（由tcp_syn_tries参数指定）。</p><p><strong>第三次握手ack丢失：</strong></p><p>服务端没有收到ack报文，会重传syn+ack到最大次数，此时服务端的连接终止了。</p><p>客户端收到syn+ack报文后，进入established状态。之后发送数据，但是服务器已经处于断开连接的状态了，所以客户端重传数据包到最大次数后，也断开了连接。客户端重传数据默认为15次，由tcp_retries2参数指定。</p><p><strong>但是如果客户端不发送数据，什么时候能断开连接呢？</strong></p><p>TCP有一个保活机制，如果一段时间内，双方都没有发送数据，那么TCP隔一段时间就会发送探测报文，如果连续几个探测报文都没有得到响应，则认为连接已经死亡，会断开连接。</p><p>net.ipv4.tcp_keepalive_time &#x3D; 7200: 表示保活时间是7200秒，也就是2小时内如果没有任何连接相关的活动，就会启动保活机制。</p><p>net.ipv4.tcp_keepalive_intvl &#x3D; 75: 表示每次检测间隔时间75秒</p><p>net.ipv4.tcp_keepalive_probes&#x3D;9: 表示检测9次无响应，认为对方是不可达的，从而中断本次的连接</p><h4 id="TCP-快速连接"><a href="#TCP-快速连接" class="headerlink" title="TCP 快速连接"></a>TCP 快速连接</h4><p>客户端向服务端发起http get请求时，一个完整的交互需要2.5个RTT, 如果第三次握手携带数据的话，也需要2个RTT.</p><p>如果开启tcp快速连接，可以减少握手的时延，虽然第一次握手还是2个RTT，但是后面在cookie过期之前握手都只需要1个RTT.</p><h4 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h4><p>在三次握手的过程中，服务器发送syn+ack包后，收到客户端的ack之前的连接称为半连接（half-open connect)。此时服务器处于syn-rcvd状态。</p><p>SYN攻击是指， 攻击客户端在短时间内伪造大量不存在的ip地址，向服务器不断发送syn包，服务器回复ack包，并等待客户端的确认。由于源地址是不存在的，服务器需要不断地重发甚至超时，这些伪造地syn包将长时间占用半连接队列，正常的syn请求被丢弃，导致目标系统运行缓慢，严重者会引起网络阻塞甚至系统瘫痪。</p><h4 id="如何检测SYN攻击"><a href="#如何检测SYN攻击" class="headerlink" title="如何检测SYN攻击"></a>如何检测SYN攻击</h4><p>当在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次syn攻击。在linux、unix系统上可以用系统自带的netstat命令来检测syn攻击。</p><h4 id="如何防御SYN攻击"><a href="#如何防御SYN攻击" class="headerlink" title="如何防御SYN攻击"></a>如何防御SYN攻击</h4><ol><li>缩短超时时间（syn timeout)</li><li>增加最大半连接数</li><li>过滤网关防护</li><li>SYN cookies技术</li></ol>]]></content>
    
    
    <categories>
      
      <category>TCP系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>三次握手</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BFC</title>
    <link href="/2022/10/29/BFC/"/>
    <url>/2022/10/29/BFC/</url>
    
    <content type="html"><![CDATA[<h4 id="BFC-IFC-GFC-FFC"><a href="#BFC-IFC-GFC-FFC" class="headerlink" title="BFC, IFC, GFC, FFC"></a>BFC, IFC, GFC, FFC</h4><p>BFC: Block formatting context 块级格式化上下文</p><p>IFC: Inline formatting context 内联格式化上下文</p><p>GFC: Gridlayout formatting context 网格布局格式化上下文</p><p>FFC: Flex formatting context 自适应格式化上下文</p><h4 id="BFC的特性："><a href="#BFC的特性：" class="headerlink" title="BFC的特性："></a>BFC的特性：</h4><ol><li>属于同一个BFC的两个相邻容器的margin会重叠</li><li>计算BFC高度时，浮动元素也会参与计算</li><li>BFC的区域不会与浮动容器发生重叠</li></ol><h4 id="触发BFC的条件："><a href="#触发BFC的条件：" class="headerlink" title="触发BFC的条件："></a>触发BFC的条件：</h4><ol><li>position: absolute或者fixed</li><li>float: left&#x2F;right</li><li>overflow: 不为visible</li><li>display: inline-block, flex, inline-flex, table-cell, table-caption</li></ol><h4 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h4><ol><li>解决margin叠加问题 (使其处于不同的BFC便不会重叠)</li><li>子元素设置float，父元素高度塌陷 (父元素设置overflow:hidden触发BFC)</li><li>左右两栏布局，左边元素浮动，右边元素与左侧元素发生重叠（右侧元素设置overflow:hidden, 触发BFC)</li></ol>]]></content>
    
    
    <categories>
      
      <category>css系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sending a package + changing my hair style</title>
    <link href="/2022/10/27/English-02/"/>
    <url>/2022/10/27/English-02/</url>
    
    <content type="html"><![CDATA[<h4 id="Sending-a-package"><a href="#Sending-a-package" class="headerlink" title="Sending  a package"></a>Sending  a package</h4><p>Oh, here is the package I’ve been expecting  for a whole week.</p><p>Open it. well, i have to say this color does not look good on you.</p><p>That makes two of us. It is so different from the pictures on the website. i have to return it.</p><p>Hi, I’d like to send this package. It’s a dress.</p><p>Sure, please write down your name, address, contact information and recipient’s name, address and contact information.</p><p>Done, anything else? Would you like to send it by standard delivery or Express delivery?</p><p>Standard delivery please.</p><hr><h4 id="Changing-my-hair-style"><a href="#Changing-my-hair-style" class="headerlink" title="Changing my hair style"></a>Changing my hair style</h4><p>Hi, i want  to have a new hairdo. I’m a bit tired of long straight hair.</p><p>Well, maybe try some colors?. How about dye your hair brown?</p><p>I have never dyed my hair before. I can give it a try. I also want to add more volumes to my hair.</p><p>Any suggestions?</p><p>You should definitely  try wavy hair. You can totally pull it off.</p><p>Sounds good. Please trim my bangs. I’d like to have air bangs.</p><p>No problem, let’s get started.</p>]]></content>
    
    
    <categories>
      
      <category>English Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>package, English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP和HTTPS</title>
    <link href="/2022/10/23/HTTP%E5%92%8CHTTPS/"/>
    <url>/2022/10/23/HTTP%E5%92%8CHTTPS/</url>
    
    <content type="html"><![CDATA[<p>HTTP（hypertext transfer protocal 超文本传输协议） 是一个在计算机世界里专门在两点之间传输文字，图片，音频，视频等超文本数据的约定和规范。</p><p>问：http是从互联网服务器传输超文本到本地浏览器的协议，这种说法对吗？</p><p>答：不对。因为也可以是服务器到服务器之间传输。</p><h4 id="HTTP1-0-HTTP1-1"><a href="#HTTP1-0-HTTP1-1" class="headerlink" title="HTTP1.0 + HTTP1.1"></a>HTTP1.0 + HTTP1.1</h4><table><thead><tr><th>HTTP1.0</th><th>HTTP1.1</th></tr></thead><tbody><tr><td>短连接，每发起一个请求就要建立一次TCP连接</td><td>管道传输，保持长连接，只要任何一端没有明确提出断开连接，就保持TCP的连接状态，解决了请求的队头阻塞</td></tr></tbody></table><p><strong>管道传输</strong>：即在同一个TCP连接里面，客户端可以发起多个请求。只要第一个请求发出去了，不必等其响应回来，就可以发第二个请求出去，可以减少整体的响应时间</p><p>但是，服务器必须按照接收到的请求的顺序发送对这些管道化请求的响应。假设客户端先发送A请求，后发送B请求，但是服务端先收到了B请求，就要先响应B请求，再响应A请求。假如处理B请求的时候，耗时比较长，那么请求A的响应就会被阻塞，这称为<strong>响应队头阻塞</strong>。</p><p>所以，HTTP1.1管道传输解决了请求的队头阻塞，但是没有解决响应的队头阻塞。</p><hr><h4 id="HTTPS和HTTP的区别"><a href="#HTTPS和HTTP的区别" class="headerlink" title="HTTPS和HTTP的区别"></a>HTTPS和HTTP的区别</h4><p>HTTP是明文传输，所以安全上存在以下三个风险：1. 窃听风险 2. 篡改风险 3. 冒充风险</p><p>HTTPS在HTTP与TCP层加入了SSL&#x2F;TLS协议，很好地解决了上述的风险：</p><ol><li>信息加密：混合加密实现了信息的机密性，解决了窃听的风险</li><li>校验机制：摘要算法为数据生成一份独一无二的指纹，用于校验数据的完整性，解决了篡改的风险</li><li>身份证书：将服务器公钥放入到数字证书中，解决了冒充的风险</li></ol><p>HTTPS协议的主要作用可以分为两种：</p><ol><li>建立一个安全信息通道，保证数据传输的安全</li><li>确认网站的真实性</li></ol><table><thead><tr><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td>不需要申请证书</td><td>需要到CA申请证书，一般免费证书比较少，因而需要一些费用</td></tr><tr><td>明文传输，不安全</td><td>加密传输+认证身份</td></tr><tr><td>80端口</td><td>443端口</td></tr></tbody></table><h4 id="客户端在使用HTTPS方式与web服务器通信时的步骤："><a href="#客户端在使用HTTPS方式与web服务器通信时的步骤：" class="headerlink" title="客户端在使用HTTPS方式与web服务器通信时的步骤："></a>客户端在使用HTTPS方式与web服务器通信时的步骤：</h4><ol><li>客户端使用https的URL访问web服务器，要求与web服务器建立SSL连接</li><li>web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端</li><li>客户端的浏览器和web服务器开始协商SSL&#x2F;TLS连接的安全等级，也就是信息加密的等级</li><li>客户端用预置的CA列表验证证书，如果有问题则提示风险。验证后，客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用服务器的公钥对会话密钥进行加密，并传送给服务端。</li><li>双方都知道了会话密钥，用它来加密通信。</li></ol><p>尽管HTTPS并非绝对安全，掌握根证书的机构，掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，它大幅增加了中间人攻击的成本。</p><h4 id="SSL与TLS"><a href="#SSL与TLS" class="headerlink" title="SSL与TLS"></a>SSL与TLS</h4><p>SSL1.0未发布，SSL2.0有严重漏洞， SSL3.0得到应用，但是也不安全</p><p>TLS是SSL的升级版，TLS1.0, TLS1.1, TLS1.2, TLS1.3。 目前应用最广泛的是<strong>TLS1.2</strong>, 之前的版本都已经被认为是不安全的了。</p><h4 id="SSL-x2F-TLS协议（TLS1-2-的基本过程："><a href="#SSL-x2F-TLS协议（TLS1-2-的基本过程：" class="headerlink" title="SSL&#x2F;TLS协议（TLS1.2)的基本过程："></a>SSL&#x2F;TLS协议（TLS1.2)的基本过程：</h4><ol><li>客户端向服务器端索要并验证公钥</li><li>双方协商生成对话密钥</li><li>双方采用对话密钥进行加密通信。</li></ol><table><thead><tr><th>对称加密</th><th>非对称加密</th></tr></thead><tbody><tr><td>加密解密使用同一个密钥，算法简单，加解密容易，效率高，执行快，但是被拦截后不安全</td><td>加密和解密使用冈的密钥，一把作为公开的公钥，一把作为私钥。公钥加密的信息，只有私钥能解密。私钥加密的信息，只有公钥能解密</td></tr><tr><td>DES, AES, 3DES</td><td>RSA, ECC</td></tr></tbody></table><p>A和B传输数据，A具有自己的公私钥，B有自己的公私钥，公钥是在公网上公开的，任何人都能看见。私钥自己保留。A拿着B的公钥+信息数据，只有B手里的私钥才能解开。假设C拦截了A传递的信息，他是解不开的，因为C没有这个公钥对应的私钥，所以比较安全。</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http, https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP连接之四次挥手</title>
    <link href="/2022/10/23/TCP%E8%BF%9E%E6%8E%A5%E4%B9%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <url>/2022/10/23/TCP%E8%BF%9E%E6%8E%A5%E4%B9%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="TCP断开连接四次挥手"><a href="#TCP断开连接四次挥手" class="headerlink" title="TCP断开连接四次挥手"></a>TCP断开连接四次挥手</h4><p>客户端状态：ESTABLISHED, FIN_WAIT_1, FIN_WAIT_2, TIME_WAIT, CLOSE</p><p>服务端状态：ESTABLISHED, CLOSED_WAIT, LAST_ACK, CLOSE</p><h5 id="四次挥手过程："><a href="#四次挥手过程：" class="headerlink" title="四次挥手过程："></a>四次挥手过程：</h5><p><img src="/images/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png"></p><ol><li><p>第一次挥手</p><p>客户端打算断开连接，会发一个TCP首部FIN&#x3D;1的报文给服务端，之后客户端进入FIN_WAIT_1状态</p></li><li><p>第二次挥手</p><p>服务端收到报文后，就向客户端发送ACK应答报文，之后服务端进入CLOSE_WAIT状态</p></li><li><p>第三次挥手</p><p>客户端收到服务端的ACK应答报文后，之后进入FIN_WAIT_2状态。但此时服务端可能还有一些数据没有处理完。等待服务端处理完数据后，也向客户端发送FIN报文，之后服务端进入LAST_ACK状态。</p></li><li><p>第四次挥手</p><p>客户端收到服务端的FIN报文后，回一个ACK应答报文，之后进入TIME_WAIT状态。服务端收到了ACK应答报文后，就进入到 了CLOSED状态，至此服务端已经完成连接的关闭。</p><p>客户端在经过2MSL一段时间后，自动进入CLOSED状态，至此客户端也完成了连接的关闭。</p></li></ol><h4 id="为什么要进行四次挥手？"><a href="#为什么要进行四次挥手？" class="headerlink" title="为什么要进行四次挥手？"></a>为什么要进行四次挥手？</h4><p>首先第一次挥手时不能省略的，否则服务端不知道客户端要断开连接。</p><p>关闭连接时，客户端向服务端发送FIN报文时，仅仅表示客户端不再发送数据了，但是还能接收数据。同时服务器可能还有一些数据要处理，不能直接给客户端发送关闭连接的报文，这可能会导致数据丢失。因此，服务端必须额外发送一次报文，用于通知客户端自己的数据已经处理完毕。</p><p>那服务端能不能在数据处理完毕后直接回复给客户端FIN+ACK报文呢？不行。因为如果要处理的数据过多的话，客户端可能长时间得不到回应。这会导致客户端认为自己的报文丢失，然后重发FIN报文，导致资源浪费。因此FIN和ACK必须分两次与服务端进行挥手。</p><p>那最后一次挥手能不能省去呢？不行。如果服务端在发送FIN报文后直接关闭的话，如果FIN报文丢失，那么客户端将无法关闭。</p><h4 id="为什么第四次挥手后，客户端要等待2MSL"><a href="#为什么第四次挥手后，客户端要等待2MSL" class="headerlink" title="为什么第四次挥手后，客户端要等待2MSL?"></a>为什么第四次挥手后，客户端要等待2MSL?</h4><p>MSL: maximum segment lifetime, 即报文最大生存时间。它是任何报文在网络上的最大存活时间，超过这个时间报文将被丢弃。</p><p><strong>TIME_WAIT的意义：</strong></p><ul><li>优雅的关闭TCP连接，也就是尽量保证被动关闭的一端收到它自己发出去的FIN报文的ACK确认报文；</li><li>处理延迟的重复报文，这主要是为了避免前后两个使用相同四元组的连接中的前一个连接的报文干扰后一个连接。</li></ul><p><strong>为什么是2MSL?</strong></p><ol><li><p>2MSL 的时间能够使全部已失效的报文都消失（防止对新建的连接造成影响）。若在不等待2MSL，立即建立新的连接，那么在关闭连接前发送的失效报文段非常可能影响新的连接。</p></li><li><p>保证连接可以正确地关闭。因为一旦最后一次挥手ACK丢包，如果没有TIME_WAIT阶段，客户端将直接关闭，这将使得报文无法重发，服务端将无法关闭，一直处于LAST_ACK状态，使得客户端和服务端之间无法建立连接。有了TIME_WAIT阶段，客户端发送的ack包丢失后，server会再次发送FIN报文，等待client的确认，client在2MSL内收到server重传的报文再次确认。</p><blockquote><p>2MSL就是一个ack发送和一个FIN回复所需的最大时间。如果直到2MSL，Client都没有再次收到FIN，那么Client推断ACK已经被成功接收，则结束TCP连接。</p><p>RFC中MSL为2分钟，而现实中经常使用值是30秒，1分钟或者2分钟。</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>TCP系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP断开连接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP协议介绍</title>
    <link href="/2022/10/23/TCP%E4%BB%8B%E7%BB%8D/"/>
    <url>/2022/10/23/TCP%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><p>TCP(Transmission Control Protocol), 传输控制协议，是一种面对连接的，可靠的，基于字节流的通信协议。数据在传输前需要建立连接，传输完毕后要断开连接。</p><p>TCP协议是在传输层端到端地传输信息。网络层是提供主机之间地逻辑通信机制。传输层是提供应用进程之间的逻辑通信机制，位于网络层之上，依赖于网络层服务，对网络层服务进行增强。</p><h4 id="可靠的特性："><a href="#可靠的特性：" class="headerlink" title="可靠的特性："></a>可靠的特性：</h4><p>序列号，确认应答，超时重传，流量控制，拥塞控制等。</p><hr><h4 id="如何理解：TCP是面对字节流的协议，UDP是面对报文的协议。"><a href="#如何理解：TCP是面对字节流的协议，UDP是面对报文的协议。" class="headerlink" title="如何理解：TCP是面对字节流的协议，UDP是面对报文的协议。"></a>如何理解：TCP是面对字节流的协议，UDP是面对报文的协议。</h4><p>当用户消息通过UDP协议传输时，操作系统不会对消息进行拆分，在组装好UDP头部后就交给网络层来处理，所以发出去的UDP报文中的数据部分就是完整的应用消息，也就是每一个UDP报文就是一个用户消息的边界。这样接收方在收到UDP报文后，读一个UDP报文就能读取到完整的用户消息。</p><p>当用户消息通过TCP协议传输时，消息可能会被操作系统分组成多个TCP报文。如果接收方的程序不知道发送方发送消息的长度，也就是不知道消息的边界时，是无法读出一个有效的用户消息的。</p><hr><h4 id="TCP粘包问题"><a href="#TCP粘包问题" class="headerlink" title="TCP粘包问题"></a>TCP粘包问题</h4><p>当两个消息的某个部分内容被分到同一个TCP报文时，就是我们常说的TCP粘包问题。</p><h4 id="TCP粘包现象产生的原因"><a href="#TCP粘包现象产生的原因" class="headerlink" title="TCP粘包现象产生的原因"></a>TCP粘包现象产生的原因</h4><p>发送方和接收方对数据的处理都有可能引发粘包现象：</p><ol><li>发送方：TCP为了提高传输效率，会在收集到足够多的数据后才一起发送，同时一条数据太长，TCP还会将数据进行拆分发送</li><li>接收方：接收方收到的数据会保存在缓存中，如果应用层提取数据不够快就会导致缓存中多条数据粘在一起</li></ol><h4 id="如何解决粘包"><a href="#如何解决粘包" class="headerlink" title="如何解决粘包"></a>如何解决粘包</h4><p>粘包的问题出现是因为不知道一个用户消息的边界在哪儿，如果可以知道边界在哪里，接收方就可以通过边界来划分出有效的用户消息。</p><p>一般有三种分包的方式：</p><ol><li>固定长度的消息</li><li>特殊字符作为边界（注意消息中的字符要转义）</li><li>自定义消息结构</li></ol><hr><h4 id="TCP协议的缺陷"><a href="#TCP协议的缺陷" class="headerlink" title="TCP协议的缺陷"></a>TCP协议的缺陷</h4><h5 id="1-升级TCP的工作很难"><a href="#1-升级TCP的工作很难" class="headerlink" title="1. 升级TCP的工作很难"></a>1. 升级TCP的工作很难</h5><p>TCP协议是在内核中实现的，应用程序只能使用不能修改。如果想要升级TCP协议，只能升级内核。升级内核涉及到底层软件和运行库的更新，要考虑兼容性。很多TCP协议的新特性，都是需要客户端和服务端同时支持才能生效。如TCP FAST OPEN, 2013年就提出来了，但是Windows很多系统版本依然不支持。</p><h5 id="2-TCP建立连接的延迟"><a href="#2-TCP建立连接的延迟" class="headerlink" title="2. TCP建立连接的延迟"></a>2. TCP建立连接的延迟</h5><p>基于TCP实现的应用协议，都需要先建立三次握手才能进行数据传输，如HTTP1.0&#x2F;1.1, HTTP2, HTTPS。现在很多网站都是使用https的，这意味着在tcp三次握手后，还需要经过TLS四次握手，才能进行数据的传输。这在一定程度上增加了数据传输的延迟。</p><p>另外，针对HTTPS来说，TLS是在应用层实现的握手，而TCP是在内核实现的握手，这两个握手过程是无法结合在一起的，总是得先完成TCP握手，才能进行TLS握手。</p><h5 id="3-TCP存在队头阻塞的问题"><a href="#3-TCP存在队头阻塞的问题" class="headerlink" title="3. TCP存在队头阻塞的问题"></a>3. TCP存在队头阻塞的问题</h5><p>TCP是字节流协议，必须保证收到的字节数据是完整而且有序的。如果序列号较低的TCP段在网络传输中丢失了，即使序列号较高的TCP段已经被接收了，应用层也无法从内核中读取到这部分数据。这就是TCP队头阻塞问题。</p><h5 id="4-网络迁移需要重新建立TCP连接"><a href="#4-网络迁移需要重新建立TCP连接" class="headerlink" title="4. 网络迁移需要重新建立TCP连接"></a>4. 网络迁移需要重新建立TCP连接</h5><p>基于TCP传输的HTTP协议，由于是通过思远组（源IP, 源端口，目的IP, 目的端口）确定一条TCP连接。那么当移动设备的网络从4G切换到WIFI时，意味着IP地址发生变化了，那么就需要断开连接，然后重新建立TCP连接。而建立连接的过程包含TCP三次握手和TLS四次握手的时延，以及TCP慢启动的减速过程，给用户的感觉就是网络突然卡顿了以下。</p>]]></content>
    
    
    <categories>
      
      <category>TCP系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>UDP, TCP缺陷，粘包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DNS解析</title>
    <link href="/2022/10/23/DNS%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/10/23/DNS%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Learning &amp;&amp; shopping</title>
    <link href="/2022/10/23/English-01/"/>
    <url>/2022/10/23/English-01/</url>
    
    <content type="html"><![CDATA[<p>Learning is an import part of life. We learn in big and little ways, whether we realize it or not. </p><p>You are constantly learning, while reading an article, practicing a new language, making a mistake, meeting someone new, talking to a friend, watching a TV show or even asking your parents a question. All of these activities teach you something new.</p><p>Learning isn’t about knowing everything and being smart. It is about personal growth. It is a great way to keep ourselves engaged.</p><hr><h4 id="Shopping-for-clothes"><a href="#Shopping-for-clothes" class="headerlink" title="Shopping for clothes"></a>Shopping for clothes</h4><p>Hi, Madam, welcome to our store. Can I help you with anything?</p><p>Well, I am just looking around.</p><p>No problem. Take your time! I’ll be right there if you need me.</p><p>Thanks. Oh, this hoodie looks good. Do you have a medium for this?</p><p>Sure, let me get one for you. Here you are. The fitting room is over there.</p><p>It’s a perfect fit. I’ll take it. Is it on sale?</p><p>Yes, all the hoodies  on that rack are 30% off. It’s our end-of-season sale. Are you paying with cash or card?</p><p>Cash, please.</p>]]></content>
    
    
    <categories>
      
      <category>English Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>English, shopping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>async 和 defer</title>
    <link href="/2022/10/22/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B-%20async,%20defer/"/>
    <url>/2022/10/22/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B-%20async,%20defer/</url>
    
    <content type="html"><![CDATA[<p><strong>script 标签内没有async或defer时:</strong></p><script src="script.js"></script><p>当浏览器碰到 script 脚本的时候, 如果没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p><hr><p><strong>script标签内设置async时：</strong></p><script async src="script.js"></script><p>script脚本会异步加载，在加载过程中不会阻塞HTML代码的解析和渲染，当script脚本加载完毕后，script脚本会立即执行，此时会阻塞HTML代码的解析和渲染，并且是哪个先下载完执行哪个;</p><hr><p><strong>script标签设置defer时：</strong></p><script defer src="myscript.js"></script><p> script脚本会异步加载，在加载过程中不会阻塞HTML代码的解析和渲染，当script脚本加载完毕后，script脚本不会立即执行，会被延迟到整个页面加载完毕后在按照顺序再执行；</p><hr><p><strong>defer是“渲染完再执行”，async是“下载完就执行”。</strong>如果有多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的；</p>]]></content>
    
    
    <categories>
      
      <category>性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>defer, async</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack与vite的区别</title>
    <link href="/2022/10/21/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-%20webpack%E4%B8%8Evite/"/>
    <url>/2022/10/21/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-%20webpack%E4%B8%8Evite/</url>
    
    <content type="html"><![CDATA[<p>Vite 是新一代的 JavaScript 构建工具，通过使用基于 ESM 的工作流程进行本地开发，确保开发服务器即使在处理大型 JavaScript 应用程序时也能保持快速。</p><p>webpack和vite的区别：</p><h4 id="1-启动"><a href="#1-启动" class="headerlink" title="1. 启动"></a>1. 启动</h4><hr><p><strong>webpack</strong>是先打包再启动开发服务器。webpack的构建流程简单来说，就是递归编译每一个模块文件，对于不同类型的文件使用不同的 webpack loader 进行处理：</p><p>1.先逐级递归识别依赖，构建依赖图谱</p><p>2.将代码转化成AST抽象语法树</p><p>3.在AST阶段中去处理代码</p><p>4.把AST抽象语法树变成浏览器可以识别的代码， 然后输出</p><p><img src="C:\Users\Admin\Desktop\139239-20220413135824579-927502402.png" alt="img"></p><p><strong>vite</strong>是直接启动开发服务器，然后按需编译依赖文件。Vite原理:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;./main.js&quot;</span> type=<span class="hljs-string">&quot;module&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>浏览器开始原生支持 ES 模块</strong>。每声明一个script 标签类型为 module 时，浏览器就会向服务器发起一个get请求：<a href="http://localhost:3000/src/main.js">http://localhost:3000/src/main.js</a> 请求main.js文件。当检测到内部含有import引入的包，又会对其内部的import引用发起http请求获取模块的内容文件。</p><p>vite的主要功能是通过劫持浏览器的这些请求，并进行相应的处理，然后再返回给浏览器。</p><blockquote><p>Vite首页加载时速度较慢。是因为vite使用浏览器承载部分打包与模块加载工作，因此即使开发服务器快速启动，但是浏览器也需要更多时间来下载和处理所有这些请求。</p></blockquote><p><img src="C:\Users\Admin\Desktop\139239-20220413135834497-425297286.png" alt="img"></p><h4 id="2-编译速度"><a href="#2-编译速度" class="headerlink" title="2. 编译速度"></a>2. 编译速度</h4><hr><p>vite将应用中的模块分为：</p><p><strong>依赖：</strong>通常为纯js文件, 开发时不会变动。—–使用esbuild预构建依赖。Esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍</p><p><strong>源码：</strong>通常是非js文件，如jsx, vue, css等，时常变化，且并不是所有的源码都需要同时被加载。—–Vite 以 原生 ESM 方式服务源码。这实际上是让浏览器接管了打包程序的部分工作。vite只在浏览器请求源码时对源码进行转换并按需提供源码。</p><p>Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age&#x3D;31536000,immutable 进行<em>强缓存</em>，因此一旦被缓存它们将不需要再次请求。</p><h6 id="Javascript-和go"><a href="#Javascript-和go" class="headerlink" title="Javascript 和go"></a>Javascript 和go</h6><p>Javascript 程序每次执行都需要先由解释器一边将源码翻译成机器语言，一边调度执行；而Go是一种编译型语言，在编译阶段就已经将源码转译成机器码，启动时只需要直接执行这些机器码即可。也就意味着，Go语言编写的程序比javascript少了一个动态解释的过程。</p><p>javascript本质上是一门单线程语言，直到引入webworker规范之后才有可能在浏览器，node中实现多线程操作。Go天生具有多线程运行能力，打包过程的解析，代码生成阶段已经实现完全并行处理。</p><p>Go语言多个线程之间还能共享相同的内存空间，而javascript的每个线程都有自己独有的内存堆。这意味着Go中多个处理单元，例如解析资源A的线程，可以直接读取资源B线程的运行结果，而在javascript中相同的操作需要调用通讯接口worker.postMessage在线程间复制数据。</p><h4 id="3-HMR-hot-module-replacement"><a href="#3-HMR-hot-module-replacement" class="headerlink" title="3. HMR(hot module replacement)"></a>3. HMR(hot module replacement)</h4><hr><p>当某个模块内容改变时，vite让浏览器去重新请求该模块即可，webpack需要将该模块的所有依赖重新编译；</p><p><strong>注意：</strong></p><blockquote><p>当需要打包到生产环境时，vite使用传统的rollup进行打包，确保生产构建实现性能优化技术，如 tree-shaking、延迟加载和常见的块拆分。</p><p>所以，vite的优势是体现在开发阶段，另外，由于vite使用的是ES Module，所以代码中不可以使用CommonJs.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>webpack系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vite, webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器缓存</title>
    <link href="/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <url>/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p><strong>强缓存</strong>：只要浏览器判断缓存没过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在浏览器这边。</p><p>Cache-control: 相对时间，优先级高</p><p>expires: 绝对时间</p><p><strong>协商缓存</strong>：服务端告诉客户端是否可以使用缓存</p><p>Last-modified + If-modified-since:  基于时间实现</p><p>Etag+If-none-match:  基于一个唯一的标识实现，优先级更高</p><blockquote><p>注意：协商缓存的这两个字段都需要配合强制缓存来使用。只有在未命中强制缓存的时候，才能发起带有协商缓存字段的请求。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>浏览器系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js系列</title>
    <link href="/2022/10/19/Node-js%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/Node-js%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Node.js系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React系列</title>
    <link href="/2022/10/19/React%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/React%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TS系列</title>
    <link href="/2022/10/19/TS%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/TS%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器渲染</title>
    <link href="/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    <url>/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<p>大多数设备的刷新频率是60Hz，也就是说浏览器对每一帧画面的渲染工作要在16ms内完成，超出这个时间，页面的渲染就会出现卡顿现象，影响用户体验。</p><blockquote><p>图像在屏幕上更新的速度，也即屏幕上的图像每秒钟出现的次数，它的单位是赫兹（Hz）。</p><p>刷新频率越高，屏幕上图像闪烁感就越小，稳定性也就越高，换言之对视力的保护也越好。一般时人的眼睛、不容易察觉75Hz以上刷新频率带来的闪烁感，因此最好能将您显示卡刷新频率调到75Hz以上。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>浏览器系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渲染</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack基础</title>
    <link href="/2022/10/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-%20webpack%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-%20webpack%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h4 id="Webpack-plugin"><a href="#Webpack-plugin" class="headerlink" title="Webpack plugin"></a>Webpack plugin</h4><ol><li><p>html-webpack-plugin: </p><p>webpack构建后生成html文件，同时把构建好的入口js文件引入到生成的html文件中</p></li><li><p>clean-webpack-plugin: </p><p>每次构建前清理输出目录里面的文件</p></li><li><p>mini-css-extract-plugin: </p><p>抽离css样式，将所有css提取打包成一个文件</p></li><li><p>copy-webpack-plugin: </p><p>将项目中的某个文件或整个文件夹在打包的时候复制一份到打包后的文件夹中</p></li><li><p>event-hooks-webpack-plugin: 暴露webpack钩子</p></li><li><p>node-polyfill-webpack-plugin: 引入node核心模块</p></li><li><p>eslint-webpack-plugin: 语言差错工具</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>webpack系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue源码-Vue.use</title>
    <link href="/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20Vue.use/"/>
    <url>/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20Vue.use/</url>
    
    <content type="html"><![CDATA[<h4 id="Vue-use-Plugin"><a href="#Vue-use-Plugin" class="headerlink" title="Vue.use(Plugin)"></a>Vue.use(Plugin)</h4><p>用途：用来安装插件，如Vuex, vue-router, ElementUI等， 是vue与插件之间的桥梁。其实就是调用插件提供的install方法，install方法内部可以访问Vue。</p><ol><li>如果插件是一个对象，必须提供install方法。</li><li>如果插件是一个函数，它会被作为install方法。</li><li>当install方法被同一个插件多次调用，插件将只会被安装一次。</li><li>需要在new Vue()之前调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">plugin:<span class="hljs-built_in">Function</span> | <span class="hljs-built_in">Object</span></span>) &#123;<br>    <span class="hljs-keyword">const</span> installedPlugins = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> || (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> = []));<br>    <span class="hljs-keyword">if</span> (installedPulgins.<span class="hljs-title function_">indexOf</span>(plugin) &gt; -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">const</span> args = <span class="hljs-title function_">toArray</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>); <br>    <span class="hljs-comment">// 将类数组转化为数组，并获取从下标1到最后的其他参数（去掉了plugin)，如Vue.use(plugin, &#123;size:&#x27;&#x27;&#125;)</span><br>    <br>    args.<span class="hljs-title function_">unshift</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">// 将Vue构造器添加为第一个参数，因为install方法的第一个参数是Vue</span><br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> pulgin.<span class="hljs-property">install</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        plugin.<span class="hljs-property">install</span>.<span class="hljs-title function_">apply</span>(plugin, args);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> plugin === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        plugin.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, args);<br>    &#125;<br>    installedPlugins.<span class="hljs-title function_">push</span>(plugin);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;  <br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toArray</span>(<span class="hljs-params">list:any, start?number</span>):<span class="hljs-title class_">Array</span>&lt;any&gt; &#123;<br>    start = start || <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> i = list.<span class="hljs-property">length</span> - start;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">ret</span>:<span class="hljs-title class_">Array</span>&lt;any&gt; = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(i)<br>    <span class="hljs-keyword">while</span>(i--) &#123;<br>        ret[i] = list[i + start]<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>Flow 是facebook推出的Javascript静态类型检查工具。Javascript是动态类型语言，容易写出非常隐蔽的隐患代码，在编译期甚至看上去都不会报错，但在运行阶段就可能出现各种奇怪的bug。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue源码-nextTick</title>
    <link href="/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20nextTick/"/>
    <url>/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20nextTick/</url>
    
    <content type="html"><![CDATA[<h4 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h4><p><strong>作用</strong>：接收一个回调函数作为参数，并将这个回调函数延迟到DOM更新后执行</p><p><strong>使用场景</strong>：想要操作 基于最新数据生成的DOM时，就将这个操作放在nextTick的回调中, 如1. created生命周期中操作DOM, 2. 修改了数据后，获取DOM值 3. 原本隐藏的input元素显示后，获取焦点或者获得宽高等场景。</p><p><strong>调用方式</strong>：</p><p>Vue.nextTick(callback);</p><p>Vue.nextTick().then(callback);</p><p>vm.$nextTick(callback)</p><p><strong>实现原理</strong>：将传入的回调函数包装成异步任务，异步任务又分微任务和宏任务，为了尽快执行所以优先选择微任务。nextTick提供了四种异步方法: Promise.then, MutationObserver, setImmediate, setTimeout(fn,0)</p><blockquote><p>因为Vue的异步更新策略，当监听到数据发生变化的时候不会立即去更新DOM， 而是开启一个任务队列，并缓存在同一事件循环中发生的所有数据变更。这种做法带来的好处是：可以将多次数据更新合并成一次，减少操作DOM的次数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> callbacks = [] <span class="hljs-comment">// 存放cb的队列</span><br><span class="hljs-keyword">let</span> pending = <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否马上遍历队列，执行cb的标志</span><br><span class="hljs-keyword">let</span> timerFunc <span class="hljs-comment">// nextTick异步实现fn</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Promise</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="hljs-title function_">isNative</span>(<span class="hljs-title class_">Promise</span>)) &#123;<br>  <span class="hljs-comment">// Promise方案</span><br>  <span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    p.<span class="hljs-title function_">then</span>(flushCallbacks) <span class="hljs-comment">// 将flushCallbacks包装进Promise.then中</span><br>  &#125;<br>  isUsingMicroTask = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!isIE &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">MutationObserver</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; (<br>  <span class="hljs-title function_">isNative</span>(<span class="hljs-title class_">MutationObserver</span>) ||<br>  <span class="hljs-title class_">MutationObserver</span>.<span class="hljs-title function_">toString</span>() === <span class="hljs-string">&#x27;[object MutationObserverConstructor]&#x27;</span><br>)) &#123;<br>  <span class="hljs-comment">// MutationObserver方案</span><br>  <span class="hljs-keyword">let</span> counter = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(flushCallbacks) <span class="hljs-comment">// 将flushCallbacks作为观测变化的cb</span><br>  <span class="hljs-keyword">const</span> textNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-title class_">String</span>(counter)) <span class="hljs-comment">// 创建文本节点</span><br>  <span class="hljs-comment">// 观测文本节点变化</span><br>  observer.<span class="hljs-title function_">observe</span>(textNode, &#123;<br>    <span class="hljs-attr">characterData</span>: <span class="hljs-literal">true</span><br>  &#125;)<br>  <span class="hljs-comment">// timerFunc改变文本节点的data，以触发观测的回调flushCallbacks</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123; <br>    counter = (counter + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span><br>    textNode.<span class="hljs-property">data</span> = <span class="hljs-title class_">String</span>(counter)<br>  &#125;<br>  isUsingMicroTask = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> setImmediate !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="hljs-title function_">isNative</span>(setImmediate)) &#123;<br>  <span class="hljs-comment">// setImmediate方案</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setImmediate</span>(flushCallbacks)<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// 最终降级方案setTimeout</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(flushCallbacks, <span class="hljs-number">0</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">nextTick</span> (cb?: <span class="hljs-title class_">Function</span>, ctx?: <span class="hljs-title class_">Object</span>) &#123;<br>  <span class="hljs-keyword">let</span> _resolve<br>  <span class="hljs-comment">// 往全局的callbacks队列中添加cb</span><br>  callbacks.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (cb) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        cb.<span class="hljs-title function_">call</span>(ctx)<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-title function_">handleError</span>(e, ctx, <span class="hljs-string">&#x27;nextTick&#x27;</span>)<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_resolve) &#123;<br>      <span class="hljs-comment">// 这里是支持Promise的写法</span><br>      <span class="hljs-title function_">_resolve</span>(ctx)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">if</span> (!pending) &#123;<br>    pending = <span class="hljs-literal">true</span><br>    <span class="hljs-comment">// 执行timerFunc，在下一个Tick中执行callbacks中的所有cb</span><br>    <span class="hljs-title function_">timerFunc</span>()<br>  &#125;<br>  <span class="hljs-comment">// 对Promise的实现，这也是我们使用时可以写成nextTick.then的原因</span><br>  <span class="hljs-keyword">if</span> (!cb &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Promise</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      _resolve = resolve<br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flushCallbacks</span> () &#123;<br>  pending = <span class="hljs-literal">false</span> <span class="hljs-comment">// 注意这里，一旦执行，pending马上被重置为false</span><br>  <span class="hljs-keyword">const</span> copies = callbacks.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>)<br>  callbacks.<span class="hljs-property">length</span> = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; copies.<span class="hljs-property">length</span>; i++) &#123;<br>    copies[i]() <span class="hljs-comment">// 执行每个cb</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-29e0e7551af517c077e22d733972c3e4_720w.webp" alt="img"></p><p>Vue 响应式原理：</p><p><a href="https://juejin.cn/post/7074422512318152718">https://juejin.cn/post/7074422512318152718</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nextTick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-bind</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20bind/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20bind/</url>
    
    <content type="html"><![CDATA[<p>ES5引入bind的真正目的是为了弥补call&#x2F;apply的不足。由于call&#x2F;apply会对目标函数自动执行，从而导致它无法在事件绑定函数中使用。因为事件绑定函数不需要我们自己手动执行，它是在事件被触发时由JS内部自动执行的。而bind在实现改变函数this的同时又不会自动执行目标函数，因此可以完美解决事件绑定函数的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>&#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">3000</span>)<br>&#125;<br><br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span>&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>&#125;, <span class="hljs-number">3000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="手写要点："><a href="#手写要点：" class="headerlink" title="手写要点："></a>手写要点：</h4><p>1.返回一个函数 2. 能够接收参数 3. 能够支持作为构造函数调用(new方式调用时，this的指向不再是传入的context, 返回函数的原型链也要和绑定函数的原型链关联起来)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, ...args1</span>) &#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br><br>    <span class="hljs-keyword">let</span> resultFn = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args2</span>)&#123;<br>        self.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> resultFn ? <span class="hljs-variable language_">this</span> : context, ...args1, ...args2);<br>    &#125;<br><br>    <span class="hljs-comment">// resultFn.prototype = self.prototype; 修改了resultFn的原型后，直接修改了绑定函数的prototype</span><br>    <span class="hljs-keyword">let</span> fnNo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>();<br>    fnNo.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = self.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    resultFn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fnNo</span>();<br><br>    <span class="hljs-keyword">return</span> resultFn;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-call, apply</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20call,%20apply/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20call,%20apply/</url>
    
    <content type="html"><![CDATA[<h5 id="call-apply-bind-的区别"><a href="#call-apply-bind-的区别" class="headerlink" title="call, apply, bind 的区别"></a>call, apply, bind 的区别</h5><ol><li>call, apply, bind 都可以修改this的指向，但是bind是返回一个新的函数，并没有执行。call和apply改变this的同时，并调用了函数。</li><li>apply的参数是一个数组， call 和bind的参数是一个个传入。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Xiaoxiao&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params">age</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`this is my name:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>, age:<span class="hljs-subst">$&#123;age&#125;</span>`</span>);<br>&#125;<br><br>sayName.<span class="hljs-title function_">myCall</span>(person); <span class="hljs-comment">// </span><br>sayName.<span class="hljs-title function_">call</span>(person); <span class="hljs-comment">// </span><br><br><span class="hljs-comment">// 实现call</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = obj || <span class="hljs-variable language_">window</span>;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>    target[key] = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> res = target[key](...args)<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 实现apply</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = obj || <span class="hljs-variable language_">window</span>;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>    target[key] = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> res = target[key](args)<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>call, apply</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-debounce, throttle</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20debouce,%20throttle/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20debouce,%20throttle/</url>
    
    <content type="html"><![CDATA[<h4 id="防抖，节流"><a href="#防抖，节流" class="headerlink" title="防抖，节流"></a>防抖，节流</h4><p>控制函数的调用频率</p><p><strong>节流</strong>：函数在一段时间内的多次调用，仅第一次有效。（每次事件触发后总是等待一段时间执行，如果在等待时间内事件再次触发，则不做处理）</p><p><strong>防抖</strong>：函数在一段时间内的多次调用，仅最后一次有效。（每次事件触发的时候总是等待一段时间后再执行，如果在等待时间内再次触发，则重新计算等待时间）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// debounce</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myDebounce</span>(<span class="hljs-params">fn, delay</span>)&#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;, delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// throttle</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myThrottle</span>(<span class="hljs-params">fun, delay</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>                timer = <span class="hljs-literal">null</span>;<br>            &#125;, delay)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上一个定时器尚未完成&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myThrottle2</span>(<span class="hljs-params">func, delay</span>) &#123;<br>    <span class="hljs-keyword">var</span> last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>        <span class="hljs-keyword">if</span>(now &gt;= delay + last) &#123;<br>            func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            last = now;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;距离上次调用的时间差还不满足要求&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debounce, throttle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-new</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20new/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20new/</url>
    
    <content type="html"><![CDATA[<h4 id="new的过程并实现一个new"><a href="#new的过程并实现一个new" class="headerlink" title="new的过程并实现一个new"></a>new的过程并实现一个new</h4><ul><li><p>创建一个对象</p></li><li><p>将该对象的__proto__指向构造函数的原型对象</p></li><li><p>执行函数，并将this指向这个新创建的对象</p></li><li><p>返回值：如果构造函数没有返回值或者返回值类型是原始数据类型，则将这个新创建的对象返回出去，如果返回值类型是对象，则将对象返回出去</p><blockquote><p>tips: 构造函数不要有返回值，如果是原始类型，设置了也无意义，会默认忽略；如果返回值是对象类型，则新创建的对象也无意义。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myNew</span>(<span class="hljs-params">Cons, <span class="hljs-variable language_">arguments</span></span>)&#123;<br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, <span class="hljs-title class_">Cons</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);  <br>  <span class="hljs-comment">// obj.__proto__ = Cons.prototype</span><br>  <span class="hljs-comment">// const obj = Object.create(Cons.prototype);</span><br>  <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Cons</span>.<span class="hljs-title function_">call</span>(obj, <span class="hljs-variable language_">arguments</span>);<br>  <span class="hljs-keyword">return</span> result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> ? result : obj ;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>new实现</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
