<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>English-02</title>
    <link href="/2022/10/27/English-02/"/>
    <url>/2022/10/27/English-02/</url>
    
    <content type="html"><![CDATA[<h4 id="Sending-a-package"><a href="#Sending-a-package" class="headerlink" title="Sending  a package"></a>Sending  a package</h4><p>Oh, here is the package I’ve been expecting  for a whole week.</p><p>Open it. well, i have to say this color does not look good on you.</p><p>That makes two of us. It is so different from the pictures on the website. i have to return it.</p><p>Hi, I’d like to send this package. It’s a dress.</p><p>Sure, please write down your name, address, contact information and recipient’s name, address and contact information.</p><p>Done, anything else? Would you like to send it by standard delivery or Express delivery?</p><p>Standard delivery please.</p><hr><h4 id="Changing-my-hair-style"><a href="#Changing-my-hair-style" class="headerlink" title="Changing my hair style"></a>Changing my hair style</h4><p>Hi, i want  to have a new hairdo. I’m a bit tired of long straight hair.</p><p>Well, maybe try some colors?. How about dye your hair brown?</p><p>I have never dyed my hair before. I can give it a try. I also want to add more volumes to my hair.</p><p>Any suggestions?</p><p>You should definitely  try wavy hair. You can totally pull it off.</p><p>Sounds good. Please trim my bangs. I’d like to have air bangs.</p><p>No problem, let’s get started.</p>]]></content>
    
    
    <categories>
      
      <category>English learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>package, English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP和HTTPS</title>
    <link href="/2022/10/23/HTTP%E5%92%8CHTTPS/"/>
    <url>/2022/10/23/HTTP%E5%92%8CHTTPS/</url>
    
    <content type="html"><![CDATA[<p>HTTP（hypertext transfer protocal 超文本传输协议） 是一个在计算机世界里专门在两点之间传输文字，图片，音频，视频等超文本数据的约定和规范。</p><p>问：http是从互联网服务器传输超文本到本地浏览器的协议，这种说法对吗？</p><p>答：不对。因为也可以是服务器到服务器之间传输。</p><h4 id="HTTP1-0-HTTP1-1"><a href="#HTTP1-0-HTTP1-1" class="headerlink" title="HTTP1.0 + HTTP1.1"></a>HTTP1.0 + HTTP1.1</h4><table><thead><tr><th>HTTP1.0</th><th>HTTP1.1</th></tr></thead><tbody><tr><td>短连接，每发起一个请求就要建立一次TCP连接</td><td>管道传输，保持长连接，只要任何一端没有明确提出断开连接，就保持TCP的连接状态，解决了请求的队头阻塞</td></tr></tbody></table><p><strong>管道传输</strong>：即在同一个TCP连接里面，客户端可以发起多个请求。只要第一个请求发出去了，不必等其响应回来，就可以发第二个请求出去，可以减少整体的响应时间</p><p>但是，服务器必须按照接收到的请求的顺序发送对这些管道化请求的响应。假设客户端先发送A请求，后发送B请求，但是服务端先收到了B请求，就要先响应B请求，再响应A请求。假如处理B请求的时候，耗时比较长，那么请求A的响应就会被阻塞，这称为<strong>响应队头阻塞</strong>。</p><p>所以，HTTP1.1管道传输解决了请求的队头阻塞，但是没有解决响应的队头阻塞。</p><hr><h4 id="HTTPS和HTTP的区别"><a href="#HTTPS和HTTP的区别" class="headerlink" title="HTTPS和HTTP的区别"></a>HTTPS和HTTP的区别</h4><p>HTTP是明文传输，所以安全上存在以下三个风险：1. 窃听风险 2. 篡改风险 3. 冒充风险</p><p>HTTPS在HTTP与TCP层加入了SSL&#x2F;TLS协议，很好地解决了上述的风险：</p><ol><li>信息加密：混合加密实现了信息的机密性，解决了窃听的风险</li><li>校验机制：摘要算法为数据生成一份独一无二的指纹，用于校验数据的完整性，解决了篡改的风险</li><li>身份证书：将服务器公钥放入到数字证书中，解决了冒充的风险</li></ol><p>HTTPS协议的主要作用可以分为两种：</p><ol><li>建立一个安全信息通道，保证数据传输的安全</li><li>确认网站的真实性</li></ol><table><thead><tr><th>HTTP</th><th>HTTPS</th></tr></thead><tbody><tr><td>不需要申请证书</td><td>需要到CA申请证书，一般免费证书比较少，因而需要一些费用</td></tr><tr><td>明文传输，不安全</td><td>加密传输+认证身份</td></tr><tr><td>80端口</td><td>443端口</td></tr></tbody></table><h4 id="客户端在使用HTTPS方式与web服务器通信时的步骤："><a href="#客户端在使用HTTPS方式与web服务器通信时的步骤：" class="headerlink" title="客户端在使用HTTPS方式与web服务器通信时的步骤："></a>客户端在使用HTTPS方式与web服务器通信时的步骤：</h4><ol><li>客户端使用https的URL访问web服务器，要求与web服务器建立SSL连接</li><li>web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端</li><li>客户端的浏览器和web服务器开始协商SSL&#x2F;TLS连接的安全等级，也就是信息加密的等级</li><li>客户端用预置的CA列表验证证书，如果有问题则提示风险。验证后，客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用服务器的公钥对会话密钥进行加密，并传送给服务端。</li><li>双方都知道了会话密钥，用它来加密通信。</li></ol><p>尽管HTTPS并非绝对安全，掌握根证书的机构，掌握加密算法的组织同样可以进行中间人形式的攻击，但HTTPS仍是现行架构下最安全的解决方案，它大幅增加了中间人攻击的成本。</p><h4 id="SSL与TLS"><a href="#SSL与TLS" class="headerlink" title="SSL与TLS"></a>SSL与TLS</h4><p>SSL1.0未发布，SSL2.0有严重漏洞， SSL3.0得到应用，但是也不安全</p><p>TLS是SSL的升级版，TLS1.0, TLS1.1, TLS1.2, TLS1.3。 目前应用最广泛的是<strong>TLS1.2</strong>, 之前的版本都已经被认为是不安全的了。</p><h4 id="SSL-x2F-TLS协议（TLS1-2-的基本过程："><a href="#SSL-x2F-TLS协议（TLS1-2-的基本过程：" class="headerlink" title="SSL&#x2F;TLS协议（TLS1.2)的基本过程："></a>SSL&#x2F;TLS协议（TLS1.2)的基本过程：</h4><ol><li>客户端向服务器端索要并验证公钥</li><li>双方协商生成对话密钥</li><li>双方采用对话密钥进行加密通信。</li></ol><table><thead><tr><th>对称加密</th><th>非对称加密</th></tr></thead><tbody><tr><td>加密解密使用同一个密钥，算法简单，加解密容易，效率高，执行快，但是被拦截后不安全</td><td>加密和解密使用冈的密钥，一把作为公开的公钥，一把作为私钥。公钥加密的信息，只有私钥能解密。私钥加密的信息，只有公钥能解密</td></tr><tr><td>DES, AES, 3DES</td><td>RSA, ECC</td></tr></tbody></table><p>A和B传输数据，A具有自己的公私钥，B有自己的公私钥，公钥是在公网上公开的，任何人都能看见。私钥自己保留。A拿着B的公钥+信息数据，只有B手里的私钥才能解开。假设C拦截了A传递的信息，他是解不开的，因为C没有这个公钥对应的私钥，所以比较安全。</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http, https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP连接之四次挥手</title>
    <link href="/2022/10/23/TCP%E8%BF%9E%E6%8E%A5%E4%B9%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <url>/2022/10/23/TCP%E8%BF%9E%E6%8E%A5%E4%B9%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DNS解析</title>
    <link href="/2022/10/23/DNS%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/10/23/DNS%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Learning &amp;&amp; shopping</title>
    <link href="/2022/10/23/English-01/"/>
    <url>/2022/10/23/English-01/</url>
    
    <content type="html"><![CDATA[<p>Learning is an import part of life. We learn in big and little ways, whether we realize it or not. </p><p>You are constantly learning, while reading an article, practicing a new language, making a mistake, meeting someone new, talking to a friend, watching a TV show or even asking your parents a question. All of these activities teach you something new.</p><p>Learning isn’t about knowing everything and being smart. It is about personal growth. It is a great way to keep ourselves engaged.</p><hr><h4 id="Shopping-for-clothes"><a href="#Shopping-for-clothes" class="headerlink" title="Shopping for clothes"></a>Shopping for clothes</h4><p>Hi, Madam, welcome to our store. Can I help you with anything?</p><p>Well, I am just looking around.</p><p>No problem. Take your time! I’ll be right there if you need me.</p><p>Thanks. Oh, this hoodie looks good. Do you have a medium for this?</p><p>Sure, let me get one for you. Here you are. The fitting room is over there.</p><p>It’s a perfect fit. I’ll take it. Is it on sale?</p><p>Yes, all the hoodies  on that rack are 30% off. It’s our end-of-season sale. Are you paying with cash or card?</p><p>Cash, please.</p>]]></content>
    
    
    <categories>
      
      <category>English Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>English, shopping</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>async 和 defer</title>
    <link href="/2022/10/22/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B-async,%20defer/"/>
    <url>/2022/10/22/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B9%8B-async,%20defer/</url>
    
    <content type="html"><![CDATA[<p><strong>script 标签内没有async或defer时:</strong></p><script src="script.js"></script><p>当浏览器碰到 script 脚本的时候, 如果没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。</p><hr><p><strong>script标签内设置async时：</strong></p><script async src="script.js"></script><p>script脚本会异步加载，在加载过程中不会阻塞HTML代码的解析和渲染，当script脚本加载完毕后，script脚本会立即执行，此时会阻塞HTML代码的解析和渲染，并且是哪个先下载完执行哪个;</p><hr><p><strong>script标签设置defer时：</strong></p><script defer src="myscript.js"></script><p> script脚本会异步加载，在加载过程中不会阻塞HTML代码的解析和渲染，当script脚本加载完毕后，script脚本不会立即执行，会被延迟到整个页面加载完毕后在按照顺序再执行；</p><hr><p><strong>defer是“渲染完再执行”，async是“下载完就执行”。</strong>如果有多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的；</p>]]></content>
    
    
    <categories>
      
      <category>性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>defer, async</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack与vite的区别</title>
    <link href="/2022/10/21/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-webpack%E4%B8%8Evite/"/>
    <url>/2022/10/21/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-webpack%E4%B8%8Evite/</url>
    
    <content type="html"><![CDATA[<p>Vite 是新一代的 JavaScript 构建工具，通过使用基于 ESM 的工作流程进行本地开发，确保开发服务器即使在处理大型 JavaScript 应用程序时也能保持快速。</p><p>webpack和vite的区别：</p><h4 id="1-启动"><a href="#1-启动" class="headerlink" title="1. 启动"></a>1. 启动</h4><hr><p><strong>webpack</strong>是先打包再启动开发服务器。webpack的构建流程简单来说，就是递归编译每一个模块文件，对于不同类型的文件使用不同的 webpack loader 进行处理：</p><p>1.先逐级递归识别依赖，构建依赖图谱</p><p>2.将代码转化成AST抽象语法树</p><p>3.在AST阶段中去处理代码</p><p>4.把AST抽象语法树变成浏览器可以识别的代码， 然后输出</p><p><img src="C:\Users\Admin\Desktop\139239-20220413135824579-927502402.png" alt="img"></p><p><strong>vite</strong>是直接启动开发服务器，然后按需编译依赖文件。Vite原理:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;./main.js&quot;</span> type=<span class="hljs-string">&quot;module&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>浏览器开始原生支持 ES 模块</strong>。每声明一个script 标签类型为 module 时，浏览器就会向服务器发起一个get请求：<a href="http://localhost:3000/src/main.js">http://localhost:3000/src/main.js</a> 请求main.js文件。当检测到内部含有import引入的包，又会对其内部的import引用发起http请求获取模块的内容文件。</p><p>vite的主要功能是通过劫持浏览器的这些请求，并进行相应的处理，然后再返回给浏览器。</p><blockquote><p>Vite首页加载时速度较慢。是因为vite使用浏览器承载部分打包与模块加载工作，因此即使开发服务器快速启动，但是浏览器也需要更多时间来下载和处理所有这些请求。</p></blockquote><p><img src="C:\Users\Admin\Desktop\139239-20220413135834497-425297286.png" alt="img"></p><h4 id="2-编译速度"><a href="#2-编译速度" class="headerlink" title="2. 编译速度"></a>2. 编译速度</h4><hr><p>vite将应用中的模块分为：</p><p><strong>依赖：</strong>通常为纯js文件, 开发时不会变动。—–使用esbuild预构建依赖。Esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍</p><p><strong>源码：</strong>通常是非js文件，如jsx, vue, css等，时常变化，且并不是所有的源码都需要同时被加载。—–Vite 以 原生 ESM 方式服务源码。这实际上是让浏览器接管了打包程序的部分工作。vite只在浏览器请求源码时对源码进行转换并按需提供源码。</p><p>Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age&#x3D;31536000,immutable 进行<em>强缓存</em>，因此一旦被缓存它们将不需要再次请求。</p><h4 id="3-HMR-hot-module-replacement"><a href="#3-HMR-hot-module-replacement" class="headerlink" title="3. HMR(hot module replacement)"></a>3. HMR(hot module replacement)</h4><hr><p>当某个模块内容改变时，vite让浏览器去重新请求该模块即可，webpack需要将该模块的所有依赖重新编译；</p><p><strong>注意：</strong></p><blockquote><p>当需要打包到生产环境时，vite使用传统的rollup进行打包，确保生产构建实现性能优化技术，如 tree-shaking、延迟加载和常见的块拆分。</p><p>所以，vite的优势是体现在开发阶段，另外，由于vite使用的是ES Module，所以代码中不可以使用CommonJs.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>webpack系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vite, webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浏览器缓存</title>
    <link href="/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <url>/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p><strong>强缓存</strong>：只要浏览器判断缓存没过期，则直接使用浏览器的本地缓存，决定是否使用缓存的主动性在浏览器这边。</p><p>Cache-control: 相对时间，优先级高</p><p>expires: 绝对时间</p><p><strong>协商缓存</strong>：服务端告诉客户端是否可以使用缓存</p><p>Last-modified + If-modified-since:  基于时间实现</p><p>Etag+If-none-match:  基于一个唯一的标识实现，优先级更高</p><blockquote><p>注意：协商缓存的这两个字段都需要配合强制缓存来使用。只有在未命中强制缓存的时候，才能发起带有协商缓存字段的请求。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>浏览器系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js系列</title>
    <link href="/2022/10/19/Node-js%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/Node-js%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Node.js系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React系列</title>
    <link href="/2022/10/19/React%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/React%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TS系列</title>
    <link href="/2022/10/19/TS%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/TS%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器渲染</title>
    <link href="/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    <url>/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<p>大多数设备的刷新频率是60Hz，也就是说浏览器对每一帧画面的渲染工作要在16ms内完成，超出这个时间，页面的渲染就会出现卡顿现象，影响用户体验。</p><blockquote><p>图像在屏幕上更新的速度，也即屏幕上的图像每秒钟出现的次数，它的单位是赫兹（Hz）。</p><p>刷新频率越高，屏幕上图像闪烁感就越小，稳定性也就越高，换言之对视力的保护也越好。一般时人的眼睛、不容易察觉75Hz以上刷新频率带来的闪烁感，因此最好能将您显示卡刷新频率调到75Hz以上。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>浏览器系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渲染</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack原理</title>
    <link href="/2022/10/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-webpack%E5%8E%9F%E7%90%86/"/>
    <url>/2022/10/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-webpack%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>webpack系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue源码-Vue.use</title>
    <link href="/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20Vue.use/"/>
    <url>/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20Vue.use/</url>
    
    <content type="html"><![CDATA[<h4 id="Vue-use-Plugin"><a href="#Vue-use-Plugin" class="headerlink" title="Vue.use(Plugin)"></a>Vue.use(Plugin)</h4><p>用途：用来安装插件，如Vuex, vue-router, ElementUI等， 是vue与插件之间的桥梁。其实就是调用插件提供的install方法，install方法内部可以访问Vue。</p><ol><li>如果插件是一个对象，必须提供install方法。</li><li>如果插件是一个函数，它会被作为install方法。</li><li>当install方法被同一个插件多次调用，插件将只会被安装一次。</li><li>需要在new Vue()之前调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">plugin:<span class="hljs-built_in">Function</span> | <span class="hljs-built_in">Object</span></span>) &#123;<br>    <span class="hljs-keyword">const</span> installedPlugins = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> || (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> = []));<br>    <span class="hljs-keyword">if</span> (installedPulgins.<span class="hljs-title function_">indexOf</span>(plugin) &gt; -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">const</span> args = <span class="hljs-title function_">toArray</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>); <br>    <span class="hljs-comment">// 将类数组转化为数组，并获取从下标1到最后的其他参数（去掉了plugin)，如Vue.use(plugin, &#123;size:&#x27;&#x27;&#125;)</span><br>    <br>    args.<span class="hljs-title function_">unshift</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">// 将Vue构造器添加为第一个参数，因为install方法的第一个参数是Vue</span><br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> pulgin.<span class="hljs-property">install</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        plugin.<span class="hljs-property">install</span>.<span class="hljs-title function_">apply</span>(plugin, args);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> plugin === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        plugin.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, args);<br>    &#125;<br>    installedPlugins.<span class="hljs-title function_">push</span>(plugin);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;  <br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toArray</span>(<span class="hljs-params">list:any, start?number</span>):<span class="hljs-title class_">Array</span>&lt;any&gt; &#123;<br>    start = start || <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> i = list.<span class="hljs-property">length</span> - start;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">ret</span>:<span class="hljs-title class_">Array</span>&lt;any&gt; = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(i)<br>    <span class="hljs-keyword">while</span>(i--) &#123;<br>        ret[i] = list[i + start]<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>Flow 是facebook推出的Javascript静态类型检查工具。Javascript是动态类型语言，容易写出非常隐蔽的隐患代码，在编译期甚至看上去都不会报错，但在运行阶段就可能出现各种奇怪的bug。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue源码-nextTick</title>
    <link href="/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20nextTick/"/>
    <url>/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20nextTick/</url>
    
    <content type="html"><![CDATA[<h4 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h4><p><strong>作用</strong>：接收一个回调函数作为参数，并将这个回调函数延迟到DOM更新后执行</p><p><strong>使用场景</strong>：想要操作 基于最新数据生成的DOM时，就将这个操作放在nextTick的回调中, 如1. created生命周期中操作DOM, 2. 修改了数据后，获取DOM值 3. 原本隐藏的input元素显示后，获取焦点或者获得宽高等场景。</p><p><strong>调用方式</strong>：</p><p>Vue.nextTick(callback);</p><p>Vue.nextTick().then(callback);</p><p>vm.$nextTick(callback)</p><p><strong>实现原理</strong>：将传入的回调函数包装成异步任务，异步任务又分微任务和宏任务，为了尽快执行所以优先选择微任务。nextTick提供了四种异步方法: Promise.then, MutationObserver, setImmediate, setTimeout(fn,0)</p><blockquote><p>因为Vue的异步更新策略，当监听到数据发生变化的时候不会立即去更新DOM， 而是开启一个任务队列，并缓存在同一事件循环中发生的所有数据变更。这种做法带来的好处是：可以将多次数据更新合并成一次，减少操作DOM的次数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> callbacks = [] <span class="hljs-comment">// 存放cb的队列</span><br><span class="hljs-keyword">let</span> pending = <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否马上遍历队列，执行cb的标志</span><br><span class="hljs-keyword">let</span> timerFunc <span class="hljs-comment">// nextTick异步实现fn</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Promise</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="hljs-title function_">isNative</span>(<span class="hljs-title class_">Promise</span>)) &#123;<br>  <span class="hljs-comment">// Promise方案</span><br>  <span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    p.<span class="hljs-title function_">then</span>(flushCallbacks) <span class="hljs-comment">// 将flushCallbacks包装进Promise.then中</span><br>  &#125;<br>  isUsingMicroTask = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!isIE &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">MutationObserver</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; (<br>  <span class="hljs-title function_">isNative</span>(<span class="hljs-title class_">MutationObserver</span>) ||<br>  <span class="hljs-title class_">MutationObserver</span>.<span class="hljs-title function_">toString</span>() === <span class="hljs-string">&#x27;[object MutationObserverConstructor]&#x27;</span><br>)) &#123;<br>  <span class="hljs-comment">// MutationObserver方案</span><br>  <span class="hljs-keyword">let</span> counter = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(flushCallbacks) <span class="hljs-comment">// 将flushCallbacks作为观测变化的cb</span><br>  <span class="hljs-keyword">const</span> textNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-title class_">String</span>(counter)) <span class="hljs-comment">// 创建文本节点</span><br>  <span class="hljs-comment">// 观测文本节点变化</span><br>  observer.<span class="hljs-title function_">observe</span>(textNode, &#123;<br>    <span class="hljs-attr">characterData</span>: <span class="hljs-literal">true</span><br>  &#125;)<br>  <span class="hljs-comment">// timerFunc改变文本节点的data，以触发观测的回调flushCallbacks</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123; <br>    counter = (counter + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span><br>    textNode.<span class="hljs-property">data</span> = <span class="hljs-title class_">String</span>(counter)<br>  &#125;<br>  isUsingMicroTask = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> setImmediate !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="hljs-title function_">isNative</span>(setImmediate)) &#123;<br>  <span class="hljs-comment">// setImmediate方案</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setImmediate</span>(flushCallbacks)<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// 最终降级方案setTimeout</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(flushCallbacks, <span class="hljs-number">0</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">nextTick</span> (cb?: <span class="hljs-title class_">Function</span>, ctx?: <span class="hljs-title class_">Object</span>) &#123;<br>  <span class="hljs-keyword">let</span> _resolve<br>  <span class="hljs-comment">// 往全局的callbacks队列中添加cb</span><br>  callbacks.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (cb) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        cb.<span class="hljs-title function_">call</span>(ctx)<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-title function_">handleError</span>(e, ctx, <span class="hljs-string">&#x27;nextTick&#x27;</span>)<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_resolve) &#123;<br>      <span class="hljs-comment">// 这里是支持Promise的写法</span><br>      <span class="hljs-title function_">_resolve</span>(ctx)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">if</span> (!pending) &#123;<br>    pending = <span class="hljs-literal">true</span><br>    <span class="hljs-comment">// 执行timerFunc，在下一个Tick中执行callbacks中的所有cb</span><br>    <span class="hljs-title function_">timerFunc</span>()<br>  &#125;<br>  <span class="hljs-comment">// 对Promise的实现，这也是我们使用时可以写成nextTick.then的原因</span><br>  <span class="hljs-keyword">if</span> (!cb &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Promise</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      _resolve = resolve<br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flushCallbacks</span> () &#123;<br>  pending = <span class="hljs-literal">false</span> <span class="hljs-comment">// 注意这里，一旦执行，pending马上被重置为false</span><br>  <span class="hljs-keyword">const</span> copies = callbacks.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>)<br>  callbacks.<span class="hljs-property">length</span> = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; copies.<span class="hljs-property">length</span>; i++) &#123;<br>    copies[i]() <span class="hljs-comment">// 执行每个cb</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-29e0e7551af517c077e22d733972c3e4_720w.webp" alt="img"></p><p>Vue 响应式原理：</p><p><a href="https://juejin.cn/post/7074422512318152718">https://juejin.cn/post/7074422512318152718</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nextTick</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-bind</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20bind/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20bind/</url>
    
    <content type="html"><![CDATA[<p>ES5引入bind的真正目的是为了弥补call&#x2F;apply的不足。由于call&#x2F;apply会对目标函数自动执行，从而导致它无法在事件绑定函数中使用。因为事件绑定函数不需要我们自己手动执行，它是在事件被触发时由JS内部自动执行的。而bind在实现改变函数this的同时又不会自动执行目标函数，因此可以完美解决事件绑定函数的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>&#125;.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>), <span class="hljs-number">3000</span>)<br>&#125;<br><br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span>&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span>;<br>&#125;, <span class="hljs-number">3000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="手写要点："><a href="#手写要点：" class="headerlink" title="手写要点："></a>手写要点：</h4><p>1.返回一个函数 2. 能够接收参数 3. 能够支持作为构造函数调用(new方式调用时，this的指向不再是传入的context, 返回函数的原型链也要和绑定函数的原型链关联起来)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, ...args1</span>) &#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br><br>    <span class="hljs-keyword">let</span> resultFn = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args2</span>)&#123;<br>        self.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> resultFn ? <span class="hljs-variable language_">this</span> : context, ...args1, ...args2);<br>    &#125;<br><br>    <span class="hljs-comment">// resultFn.prototype = self.prototype; 修改了resultFn的原型后，直接修改了绑定函数的prototype</span><br>    <span class="hljs-keyword">let</span> fnNo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>();<br>    fnNo.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = self.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    resultFn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fnNo</span>();<br><br>    <span class="hljs-keyword">return</span> resultFn;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-call, apply</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20call,%20apply/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20call,%20apply/</url>
    
    <content type="html"><![CDATA[<h5 id="call-apply-bind-的区别"><a href="#call-apply-bind-的区别" class="headerlink" title="call, apply, bind 的区别"></a>call, apply, bind 的区别</h5><ol><li>call, apply, bind 都可以修改this的指向，但是bind是返回一个新的函数，并没有执行。call和apply改变this的同时，并调用了函数。</li><li>apply的参数是一个数组， call 和bind的参数是一个个传入。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Xiaoxiao&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params">age</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`this is my name:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>, age:<span class="hljs-subst">$&#123;age&#125;</span>`</span>);<br>&#125;<br><br>sayName.<span class="hljs-title function_">myCall</span>(person); <span class="hljs-comment">// </span><br>sayName.<span class="hljs-title function_">call</span>(person); <span class="hljs-comment">// </span><br><br><span class="hljs-comment">// 实现call</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = obj || <span class="hljs-variable language_">window</span>;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>    target[key] = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> res = target[key](...args)<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 实现apply</span><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = obj || <span class="hljs-variable language_">window</span>;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>    target[key] = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> res = target[key](args)<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>call, apply</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-debounce, throttle</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20debouce,%20throttle/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20debouce,%20throttle/</url>
    
    <content type="html"><![CDATA[<h4 id="防抖，节流"><a href="#防抖，节流" class="headerlink" title="防抖，节流"></a>防抖，节流</h4><p>控制函数的调用频率</p><p><strong>节流</strong>：函数在一段时间内的多次调用，仅第一次有效。（每次事件触发后总是等待一段时间执行，如果在等待时间内事件再次触发，则不做处理）</p><p><strong>防抖</strong>：函数在一段时间内的多次调用，仅最后一次有效。（每次事件触发的时候总是等待一段时间后再执行，如果在等待时间内再次触发，则重新计算等待时间）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// debounce</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myDebounce</span>(<span class="hljs-params">fn, delay</span>)&#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;, delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// throttle</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myThrottle</span>(<span class="hljs-params">fun, delay</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>                timer = <span class="hljs-literal">null</span>;<br>            &#125;, delay)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上一个定时器尚未完成&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myThrottle2</span>(<span class="hljs-params">func, delay</span>) &#123;<br>    <span class="hljs-keyword">var</span> last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>        <span class="hljs-keyword">if</span>(now &gt;= delay + last) &#123;<br>            func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            last = now;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;距离上次调用的时间差还不满足要求&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debounce, throttle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-new</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20new/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20new/</url>
    
    <content type="html"><![CDATA[<h4 id="new的过程并实现一个new"><a href="#new的过程并实现一个new" class="headerlink" title="new的过程并实现一个new"></a>new的过程并实现一个new</h4><ul><li><p>创建一个对象</p></li><li><p>将该对象的__proto__指向构造函数的原型对象</p></li><li><p>执行函数，并将this指向这个新创建的对象</p></li><li><p>返回值：如果构造函数没有返回值或者返回值类型是原始数据类型，则将这个新创建的对象返回出去，如果返回值类型是对象，则将对象返回出去</p><blockquote><p>tips: 构造函数不要有返回值，如果是原始类型，设置了也无意义，会默认忽略；如果返回值是对象类型，则新创建的对象也无意义。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myNew</span>(<span class="hljs-params">Cons, <span class="hljs-variable language_">arguments</span></span>)&#123;<br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, <span class="hljs-title class_">Cons</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);  <br>  <span class="hljs-comment">// obj.__proto__ = Cons.prototype</span><br>  <span class="hljs-comment">// const obj = Object.create(Cons.prototype);</span><br>  <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Cons</span>.<span class="hljs-title function_">call</span>(obj, <span class="hljs-variable language_">arguments</span>);<br>  <span class="hljs-keyword">return</span> result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> ? result : obj ;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>new实现</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
