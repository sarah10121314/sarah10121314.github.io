<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>webpack系列之-webpack与vite</title>
    <link href="/2022/10/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-webpack%E4%B8%8Evite/"/>
    <url>/2022/10/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B-webpack%E4%B8%8Evite/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器系列之-浏览器缓存</title>
    <link href="/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/"/>
    <url>/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Node.js系列</title>
    <link href="/2022/10/19/Node-js%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/Node-js%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Node.js系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React系列</title>
    <link href="/2022/10/19/React%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/React%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TS系列</title>
    <link href="/2022/10/19/TS%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/TS%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器系列</title>
    <link href="/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    <url>/2022/10/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%B3%BB%E5%88%97%E4%B9%8B-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>webpack系列</title>
    <link href="/2022/10/19/webpack%E7%B3%BB%E5%88%97/"/>
    <url>/2022/10/19/webpack%E7%B3%BB%E5%88%97/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue源码-Vue.use</title>
    <link href="/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20Vue.use/"/>
    <url>/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20Vue.use/</url>
    
    <content type="html"><![CDATA[<h4 id="Vue-use-Plugin"><a href="#Vue-use-Plugin" class="headerlink" title="Vue.use(Plugin)"></a>Vue.use(Plugin)</h4><p>用途：用来安装插件，如Vuex, vue-router, ElementUI等， 是vue与插件之间的桥梁。其实就是调用插件提供的install方法，install方法内部可以访问Vue。</p><ol><li>如果插件是一个对象，必须提供install方法。</li><li>如果插件是一个函数，它会被作为install方法。</li><li>当install方法被同一个插件多次调用，插件将只会被安装一次。</li><li>需要在new Vue()之前调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">use</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">plugin:<span class="hljs-built_in">Function</span> | <span class="hljs-built_in">Object</span></span>) &#123;<br>    <span class="hljs-keyword">const</span> installedPlugins = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> || (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_installedPlugins</span> = []));<br>    <span class="hljs-keyword">if</span> (installedPulgins.<span class="hljs-title function_">indexOf</span>(plugin) &gt; -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">const</span> args = <span class="hljs-title function_">toArray</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">1</span>); <br>    <span class="hljs-comment">// 将类数组转化为数组，并获取从下标1到最后的其他参数（去掉了plugin)，如Vue.use(plugin, &#123;size:&#x27;&#x27;&#125;)</span><br>    <br>    args.<span class="hljs-title function_">unshift</span>(<span class="hljs-variable language_">this</span>);<br>    <span class="hljs-comment">// 将Vue构造器添加为第一个参数，因为install方法的第一个参数是Vue</span><br>    <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> pulgin.<span class="hljs-property">install</span> === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        plugin.<span class="hljs-property">install</span>.<span class="hljs-title function_">apply</span>(plugin, args);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> plugin === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>        plugin.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, args);<br>    &#125;<br>    installedPlugins.<span class="hljs-title function_">push</span>(plugin);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;  <br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">toArray</span>(<span class="hljs-params">list:any, start?number</span>):<span class="hljs-title class_">Array</span>&lt;any&gt; &#123;<br>    start = start || <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> i = list.<span class="hljs-property">length</span> - start;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">ret</span>:<span class="hljs-title class_">Array</span>&lt;any&gt; = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(i)<br>    <span class="hljs-keyword">while</span>(i--) &#123;<br>        ret[i] = list[i + start]<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>Flow 是facebook推出的Javascript静态类型检查工具。Javascript是动态类型语言，容易写出非常隐蔽的隐患代码，在编译期甚至看上去都不会报错，但在运行阶段就可能出现各种奇怪的bug。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Vue源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue源码-nextTick</title>
    <link href="/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20nextTick/"/>
    <url>/2022/10/16/Vue%E7%B3%BB%E5%88%97%E4%B9%8B-%20nextTick/</url>
    
    <content type="html"><![CDATA[<h4 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h4><p><strong>作用</strong>：接收一个回调函数作为参数，并将这个回调函数延迟到DOM更新后执行</p><p><strong>使用场景</strong>：想要操作 基于最新数据生成的DOM时，就将这个操作放在nextTick的回调中, 如1. created生命周期中操作DOM, 2. 修改了数据后，获取DOM值 3. 原本隐藏的input元素显示后，获取焦点或者获得宽高等场景。</p><p><strong>调用方式</strong>：</p><p>Vue.nextTick(callback);</p><p>Vue.nextTick().then(callback);</p><p>vm.$nextTick(callback)</p><p><strong>实现原理</strong>：将传入的回调函数包装成异步任务，异步任务又分微任务和宏任务，为了尽快执行所以优先选择微任务。nextTick提供了四种异步方法: Promise.then, MutationObserver, setImmediate, setTimeout(fn,0)</p><blockquote><p>因为Vue的异步更新策略，当监听到数据发生变化的时候不会立即去更新DOM， 而是开启一个任务队列，并缓存在同一事件循环中发生的所有数据变更。这种做法带来的好处是：可以将多次数据更新合并成一次，减少操作DOM的次数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> callbacks = [] <span class="hljs-comment">// 存放cb的队列</span><br><span class="hljs-keyword">let</span> pending = <span class="hljs-literal">false</span> <span class="hljs-comment">// 是否马上遍历队列，执行cb的标志</span><br><span class="hljs-keyword">let</span> timerFunc <span class="hljs-comment">// nextTick异步实现fn</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Promise</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="hljs-title function_">isNative</span>(<span class="hljs-title class_">Promise</span>)) &#123;<br>  <span class="hljs-comment">// Promise方案</span><br>  <span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>()<br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    p.<span class="hljs-title function_">then</span>(flushCallbacks) <span class="hljs-comment">// 将flushCallbacks包装进Promise.then中</span><br>  &#125;<br>  isUsingMicroTask = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!isIE &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">MutationObserver</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; (<br>  <span class="hljs-title function_">isNative</span>(<span class="hljs-title class_">MutationObserver</span>) ||<br>  <span class="hljs-title class_">MutationObserver</span>.<span class="hljs-title function_">toString</span>() === <span class="hljs-string">&#x27;[object MutationObserverConstructor]&#x27;</span><br>)) &#123;<br>  <span class="hljs-comment">// MutationObserver方案</span><br>  <span class="hljs-keyword">let</span> counter = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(flushCallbacks) <span class="hljs-comment">// 将flushCallbacks作为观测变化的cb</span><br>  <span class="hljs-keyword">const</span> textNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(<span class="hljs-title class_">String</span>(counter)) <span class="hljs-comment">// 创建文本节点</span><br>  <span class="hljs-comment">// 观测文本节点变化</span><br>  observer.<span class="hljs-title function_">observe</span>(textNode, &#123;<br>    <span class="hljs-attr">characterData</span>: <span class="hljs-literal">true</span><br>  &#125;)<br>  <span class="hljs-comment">// timerFunc改变文本节点的data，以触发观测的回调flushCallbacks</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123; <br>    counter = (counter + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span><br>    textNode.<span class="hljs-property">data</span> = <span class="hljs-title class_">String</span>(counter)<br>  &#125;<br>  isUsingMicroTask = <span class="hljs-literal">true</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> setImmediate !== <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="hljs-title function_">isNative</span>(setImmediate)) &#123;<br>  <span class="hljs-comment">// setImmediate方案</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">setImmediate</span>(flushCallbacks)<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// 最终降级方案setTimeout</span><br>  timerFunc = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(flushCallbacks, <span class="hljs-number">0</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">nextTick</span> (cb?: <span class="hljs-title class_">Function</span>, ctx?: <span class="hljs-title class_">Object</span>) &#123;<br>  <span class="hljs-keyword">let</span> _resolve<br>  <span class="hljs-comment">// 往全局的callbacks队列中添加cb</span><br>  callbacks.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (cb) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        cb.<span class="hljs-title function_">call</span>(ctx)<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-title function_">handleError</span>(e, ctx, <span class="hljs-string">&#x27;nextTick&#x27;</span>)<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (_resolve) &#123;<br>      <span class="hljs-comment">// 这里是支持Promise的写法</span><br>      <span class="hljs-title function_">_resolve</span>(ctx)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">if</span> (!pending) &#123;<br>    pending = <span class="hljs-literal">true</span><br>    <span class="hljs-comment">// 执行timerFunc，在下一个Tick中执行callbacks中的所有cb</span><br>    <span class="hljs-title function_">timerFunc</span>()<br>  &#125;<br>  <span class="hljs-comment">// 对Promise的实现，这也是我们使用时可以写成nextTick.then的原因</span><br>  <span class="hljs-keyword">if</span> (!cb &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Promise</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      _resolve = resolve<br>    &#125;)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">flushCallbacks</span> () &#123;<br>  pending = <span class="hljs-literal">false</span> <span class="hljs-comment">// 注意这里，一旦执行，pending马上被重置为false</span><br>  <span class="hljs-keyword">const</span> copies = callbacks.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>)<br>  callbacks.<span class="hljs-property">length</span> = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; copies.<span class="hljs-property">length</span>; i++) &#123;<br>    copies[i]() <span class="hljs-comment">// 执行每个cb</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://pic1.zhimg.com/80/v2-29e0e7551af517c077e22d733972c3e4_720w.webp" alt="img"></p><p>Vue 响应式原理：</p><p><a href="https://juejin.cn/post/7074422512318152718">https://juejin.cn/post/7074422512318152718</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-bind</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20bind/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20bind/</url>
    
    <content type="html"><![CDATA[<h4 id="手写要点："><a href="#手写要点：" class="headerlink" title="手写要点："></a>手写要点：</h4><p>1.返回一个函数 2. 能够接收参数 3. 能够支持作为构造函数调用(new方式调用时，this的指向不再是传入的context, 返回函数的原型链也要和绑定函数的原型链关联起来)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, ...args1</span>) &#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br><br>    <span class="hljs-keyword">let</span> resultFn = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args2</span>)&#123;<br>        self.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> resultFn ? <span class="hljs-variable language_">this</span> : context, ...args1, ...args2);<br>    &#125;<br><br>    <span class="hljs-comment">// resultFn.prototype = self.prototype; 修改了resultFn的原型后，直接修改了绑定函数的prototype</span><br>    <span class="hljs-keyword">let</span> fnNo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>();<br>    fnNo.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = self.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    resultFn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fnNo</span>();<br><br>    <span class="hljs-keyword">return</span> resultFn;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-call, apply</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20call,%20apply/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20call,%20apply/</url>
    
    <content type="html"><![CDATA[<h5 id="call-apply-bind-的区别"><a href="#call-apply-bind-的区别" class="headerlink" title="call, apply, bind 的区别"></a>call, apply, bind 的区别</h5><blockquote><ol><li>call, apply, bind 都可以修改this的指向，但是bind是返回一个新的函数，并没有执行。call和apply改变this的同时，并调用了函数。</li><li>apply的参数是一个数组， call 和bind的参数是一个个传入。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Xiaoxiao&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params">age</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`this is my name:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>, age:<span class="hljs-subst">$&#123;age&#125;</span>`</span>);<br>&#125;<br><br>sayName.<span class="hljs-title function_">myCall</span>(person); <span class="hljs-comment">// </span><br>sayName.<span class="hljs-title function_">call</span>(person); <span class="hljs-comment">// </span><br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = obj || <span class="hljs-variable language_">window</span>;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>    target[key] = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> res = target[key](...args)<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = obj || <span class="hljs-variable language_">window</span>;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>    target[key] = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> res = target[key](args)<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>call, apply</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-debounce, throttle</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20debouce,%20throttle/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20debouce,%20throttle/</url>
    
    <content type="html"><![CDATA[<h4 id="防抖，节流"><a href="#防抖，节流" class="headerlink" title="防抖，节流"></a>防抖，节流</h4><p>控制函数的调用频率</p><p><strong>节流</strong>：函数在一段时间内的多次调用，仅第一次有效。（每次事件触发后总是等待一段时间执行，如果在等待时间内事件再次触发，则不做处理）</p><p><strong>防抖</strong>：函数在一段时间内的多次调用，仅最后一次有效。（每次事件触发的时候总是等待一段时间后再执行，如果在等待时间内再次触发，则重新计算等待时间）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// debounce</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myDebounce</span>(<span class="hljs-params">fn, delay</span>)&#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;, delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// throttle</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myThrottle</span>(<span class="hljs-params">fun, delay</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>                timer = <span class="hljs-literal">null</span>;<br>            &#125;, delay)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上一个定时器尚未完成&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myThrottle2</span>(<span class="hljs-params">func, delay</span>) &#123;<br>    <span class="hljs-keyword">var</span> last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>        <span class="hljs-keyword">if</span>(now &gt;= delay + last) &#123;<br>            func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            last = now;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;距离上次调用的时间差还不满足要求&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debounce, throttle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-new</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20new/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20new/</url>
    
    <content type="html"><![CDATA[<h4 id="new的过程并实现一个new"><a href="#new的过程并实现一个new" class="headerlink" title="new的过程并实现一个new"></a>new的过程并实现一个new</h4><ul><li><p>创建一个对象</p></li><li><p>将该对象的__proto__指向构造函数的原型对象</p></li><li><p>执行函数，并将this指向这个新创建的对象</p></li><li><p>返回值：如果构造函数没有返回值或者返回值类型是原始数据类型，则将这个新创建的对象返回出去，如果返回值类型是对象，则将对象返回出去</p><blockquote><p>tips: 构造函数不要有返回值，如果是原始类型，设置了也无意义，会默认忽略；如果返回值是对象类型，则新创建的对象也无意义。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myNew</span>(<span class="hljs-params">Cons, <span class="hljs-variable language_">arguments</span></span>)&#123;<br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, <span class="hljs-title class_">Cons</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);  <br>  <span class="hljs-comment">// obj.__proto__ = Cons.prototype</span><br>  <span class="hljs-comment">// const obj = Object.create(Cons.prototype);</span><br>  <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Cons</span>.<span class="hljs-title function_">call</span>(obj, <span class="hljs-variable language_">arguments</span>);<br>  <span class="hljs-keyword">return</span> result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> ? result : obj ;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>new</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
