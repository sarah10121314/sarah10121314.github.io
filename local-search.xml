<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>手写系列-bind</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20bind/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20bind/</url>
    
    <content type="html"><![CDATA[<h4 id="手写要点："><a href="#手写要点：" class="headerlink" title="手写要点："></a>手写要点：</h4><p>1.返回一个函数 2. 能够接收参数 3. 能够支持作为构造函数调用(new方式调用时，this的指向不再是传入的context, 返回函数的原型链也要和绑定函数的原型链关联起来)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">bind</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, ...args1</span>) &#123;<br>    <span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br><br>    <span class="hljs-keyword">let</span> resultFn = <span class="hljs-keyword">function</span>(<span class="hljs-params">...args2</span>)&#123;<br>        self.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span> <span class="hljs-keyword">instanceof</span> resultFn ? <span class="hljs-variable language_">this</span> : context, ...args1, ...args2);<br>    &#125;<br><br>    <span class="hljs-comment">// resultFn.prototype = self.prototype; 修改了resultFn的原型后，直接修改了绑定函数的prototype</span><br>    <span class="hljs-keyword">let</span> fnNo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>();<br>    fnNo.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = self.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    resultFn.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">fnNo</span>();<br><br>    <span class="hljs-keyword">return</span> resultFn;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-call, apply</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20call,%20apply/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20call,%20apply/</url>
    
    <content type="html"><![CDATA[<h5 id="call-apply-bind-的区别"><a href="#call-apply-bind-的区别" class="headerlink" title="call, apply, bind 的区别"></a>call, apply, bind 的区别</h5><blockquote><ol><li>call, apply, bind 都可以修改this的指向，但是bind是返回一个新的函数，并没有执行。call和apply改变this的同时，并调用了函数。</li><li>apply的参数是一个数组， call 和bind的参数是一个个传入。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Xiaoxiao&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params">age</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`this is my name:<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>, age:<span class="hljs-subst">$&#123;age&#125;</span>`</span>);<br>&#125;<br><br>sayName.<span class="hljs-title function_">myCall</span>(person); <span class="hljs-comment">// </span><br>sayName.<span class="hljs-title function_">call</span>(person); <span class="hljs-comment">// </span><br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myCall</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = obj || <span class="hljs-variable language_">window</span>;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>    target[key] = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> res = target[key](...args)<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> target = obj || <span class="hljs-variable language_">window</span>;<br>    <span class="hljs-keyword">const</span> key = <span class="hljs-title class_">Symbol</span>();<br>    target[key] = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">const</span> args = [...<span class="hljs-variable language_">arguments</span>].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">const</span> res = target[key](args)<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>call, apply</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列- debounce, throttle</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20debouce,%20throttle/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20debouce,%20throttle/</url>
    
    <content type="html"><![CDATA[<h4 id="防抖，节流"><a href="#防抖，节流" class="headerlink" title="防抖，节流"></a>防抖，节流</h4><p>控制函数的调用频率</p><p><strong>节流</strong>：函数在一段时间内的多次调用，仅第一次有效。（每次事件触发后总是等待一段时间执行，如果在等待时间内事件再次触发，则不做处理）</p><p><strong>防抖</strong>：函数在一段时间内的多次调用，仅最后一次有效。（每次事件触发的时候总是等待一段时间后再执行，如果在等待时间内再次触发，则重新计算等待时间）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// debounce</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myDebounce</span>(<span class="hljs-params">fn, delay</span>)&#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        &#125;, delay)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// throttle</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myThrottle</span>(<span class="hljs-params">fun, delay</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span> &#123;<br>                timer = <span class="hljs-literal">null</span>;<br>            &#125;, delay)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上一个定时器尚未完成&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">myThrottle2</span>(<span class="hljs-params">func, delay</span>) &#123;<br>    <span class="hljs-keyword">var</span> last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> now = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>        <span class="hljs-keyword">if</span>(now &gt;= delay + last) &#123;<br>            func.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>            last = now;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;距离上次调用的时间差还不满足要求&#x27;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>debounce, throttle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写系列-new</title>
    <link href="/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20new/"/>
    <url>/2022/10/16/%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97%E4%B9%8B-%20new/</url>
    
    <content type="html"><![CDATA[<h4 id="new的过程并实现一个new"><a href="#new的过程并实现一个new" class="headerlink" title="new的过程并实现一个new"></a>new的过程并实现一个new</h4><ul><li><p>创建一个对象</p></li><li><p>将该对象的__proto__指向构造函数的原型对象</p></li><li><p>执行函数，并将this指向这个新创建的对象</p></li><li><p>返回值：如果构造函数没有返回值或者返回值类型是原始数据类型，则将这个新创建的对象返回出去，如果返回值类型是对象，则将对象返回出去</p><blockquote><p>tips: 构造函数不要有返回值，如果是原始类型，设置了也无意义，会默认忽略；如果返回值是对象类型，则新创建的对象也无意义。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myNew</span>(<span class="hljs-params">Cons, <span class="hljs-variable language_">arguments</span></span>)&#123;<br>  <span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, <span class="hljs-title class_">Cons</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);  <br>  <span class="hljs-comment">// obj.__proto__ = Cons.prototype</span><br>  <span class="hljs-comment">// const obj = Object.create(Cons.prototype);</span><br>  <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Cons</span>.<span class="hljs-title function_">call</span>(obj, <span class="hljs-variable language_">arguments</span>);<br>  <span class="hljs-keyword">return</span> result <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span> ? result : obj ;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>手写系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>new</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
